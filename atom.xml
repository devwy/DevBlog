<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>𝓚𝓲𝓵𝓲𝓰&#39;s Blog</title>
  
  
  <link href="http://kiligwyu.com/atom.xml" rel="self"/>
  
  <link href="http://kiligwyu.com/"/>
  <updated>2021-03-25T09:17:15.711Z</updated>
  <id>http://kiligwyu.com/</id>
  
  <author>
    <name>𝓚𝓲𝓵𝓲𝓰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LayoutConstraints Unable to simultaneously satisfy constraints</title>
    <link href="http://kiligwyu.com/LayoutConstraints-unable-to-simultaneously-satisfy-constraints/"/>
    <id>http://kiligwyu.com/LayoutConstraints-unable-to-simultaneously-satisfy-constraints/</id>
    <published>2021-03-25T08:36:14.000Z</published>
    <updated>2021-03-25T09:17:15.711Z</updated>
    
    <content type="html"><![CDATA[<p>首先请看以下代码，运行结果如何。</p><!--- more ---><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lazy</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tableView <span class="operator">=</span> <span class="type">UITableView</span>(frame: .zero, style: .plain)</span><br><span class="line">        tableView.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.tableHeaderView <span class="operator">=</span> tableHeaderView</span><br><span class="line">        tableView.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">&quot;CELL&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> tableView</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lazy</span> <span class="keyword">var</span> tableHeaderView: <span class="type">UIView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> avatarImageView: <span class="type">UIImageView</span> <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> imageView <span class="operator">=</span> <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;person.circle&quot;</span>))</span><br><span class="line">            imageView.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> imageView</span><br><span class="line">        &#125;()</span><br><span class="line">        <span class="keyword">let</span> nameLabel: <span class="type">UILabel</span> <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">            label.numberOfLines <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">            label.text <span class="operator">=</span> <span class="string">&quot;洛阳城里见秋风，欲作家书意万重&quot;</span></span><br><span class="line">            label.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> label</span><br><span class="line">        &#125;()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> view <span class="operator">=</span> <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(origin: .zero,</span><br><span class="line">                                        size: <span class="type">CGSize</span>(width: <span class="type">UIScreen</span>.main.bounds.width, height: <span class="number">150</span>)))</span><br><span class="line">        view.addSubview(avatarImageView)</span><br><span class="line">        view.addSubview(nameLabel)</span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">            avatarImageView.widthAnchor.constraint(equalToConstant: <span class="number">50</span>),</span><br><span class="line">            avatarImageView.heightAnchor.constraint(equalToConstant: <span class="number">50</span>),</span><br><span class="line">            avatarImageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),</span><br><span class="line">            avatarImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: <span class="number">16</span>),</span><br><span class="line">            </span><br><span class="line">            nameLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor),</span><br><span class="line">            nameLabel.leadingAnchor.constraint(equalTo: avatarImageView.trailingAnchor, constant: <span class="number">12</span>),</span><br><span class="line">            nameLabel.trailingAnchor.constraint(lessThanOrEqualTo: view.trailingAnchor, constant: <span class="operator">-</span><span class="number">16</span>),</span><br><span class="line">        ])</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        view.addSubview(tableView)</span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">            tableView.topAnchor.constraint(equalTo: view.topAnchor),</span><br><span class="line">            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),</span><br><span class="line">            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),</span><br><span class="line">            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;CELL&quot;</span>, for: indexPath)</span><br><span class="line">        cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(indexPath.row)</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(indexPath)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，运行之后页面显示正常，但控制台输出了一些约束错误信息：</p><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20210325165120.png" alt="Unable-to-simultaneously-satisfy-constraints"></p><p>先说解决方法，<code>nameLabel</code> 的约束稍加修改：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">...</span></span><br><span class="line">        nameLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor),</span><br><span class="line">        nameLabel.leadingAnchor.constraint(equalTo: avatarImageView.trailingAnchor, constant: <span class="number">12</span>),</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">let</span> nameLabelTrailingConstraint <span class="operator">=</span></span><br><span class="line">        nameLabel.trailingAnchor.constraint(lessThanOrEqualTo: view.trailingAnchor, constant: <span class="operator">-</span><span class="number">16</span>)</span><br><span class="line">    nameLabelTrailingConstraint.priority <span class="operator">=</span> .defaultHigh</span><br><span class="line">    nameLabelTrailingConstraint.isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> view</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line"><span class="operator">...</span></span><br></pre></td></tr></table></figure><p>当自定义 tableView 的 <code>tableHeaderView</code> 或 <code>tableFooterView</code> 时会遇到这样的错误，如果设置<br><code>tableHeaderView.translatesAutoresizingMaskIntoConstraints = false</code><br>页面显示就更不对了，解决方法就是设置下约束的优先级，就如上边设置 <code>nameLabel</code> 的 <code>trailingConstraint</code> 的优先级。</p><hr><ul><li><a href="https://medium.com/@GoalStack/uiview-encapsulated-layout-width-and-height-constraints-error-10cd25b5fa5e">UIView-Encapsulated-Layout-Width and Height Constraints error</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先请看以下代码，运行结果如何。&lt;/p&gt;
&lt;!--- more ---&gt;

&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
    <category term="Swift" scheme="http://kiligwyu.com/tags/Swift/"/>
    
    <category term="UI" scheme="http://kiligwyu.com/tags/UI/"/>
    
    <category term="UITableView" scheme="http://kiligwyu.com/tags/UITableView/"/>
    
    <category term="Auto Layout" scheme="http://kiligwyu.com/tags/Auto-Layout/"/>
    
  </entry>
  
  <entry>
    <title>Scroll to row for UITableView after reloadData</title>
    <link href="http://kiligwyu.com/scroll-to-row-for-UITableView-after-reloadData/"/>
    <id>http://kiligwyu.com/scroll-to-row-for-UITableView-after-reloadData/</id>
    <published>2021-03-25T07:23:13.000Z</published>
    <updated>2021-03-25T08:20:52.587Z</updated>
    
    <content type="html"><![CDATA[<p>在 tableView <code>reloadData</code> 后滑动到指定位置，比如下拉加载更多聊天记录，并保持列表的当前位置。</p><!--- more ---><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.scrollToRow(at: indexPath, at: .top, animated: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>但是列表有跳动，滑动的位置并不对。解决方法也很简单，在 reloadData 后调用下 <code>tableView.layoutIfNeeded()</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tableView.reloadData()</span><br><span class="line">tableView.layoutIfNeeded()</span><br><span class="line">tableView.scrollToRow(at: indexPath, at: .top, animated: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><a href="https://stackoverflow.com/questions/16071503/how-to-tell-when-uitableview-has-completed-reloaddata">How to tell when UITableView has completed ReloadData?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 tableView &lt;code&gt;reloadData&lt;/code&gt; 后滑动到指定位置，比如下拉加载更多聊天记录，并保持列表的当前位置。&lt;/p&gt;
&lt;!--- more ---&gt;

&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    
    <category term="Swift" scheme="http://kiligwyu.com/tags/Swift/"/>
    
    <category term="UI" scheme="http://kiligwyu.com/tags/UI/"/>
    
    <category term="UITableView" scheme="http://kiligwyu.com/tags/UITableView/"/>
    
  </entry>
  
  <entry>
    <title>UIStackView 的 removeArrangedSubview 方法</title>
    <link href="http://kiligwyu.com/removeArrangedSubview/"/>
    <id>http://kiligwyu.com/removeArrangedSubview/</id>
    <published>2021-03-25T06:23:36.000Z</published>
    <updated>2021-03-25T07:46:11.019Z</updated>
    
    <content type="html"><![CDATA[<p>当在 UITableViewCell 中使用了 UIStackView 时，在 <code>prepareForReuse()</code> 中调用了 UIStackView 的 <code>removeArrangedSubview:</code> 方法，发现 cell 重用时依然会显示错乱，查了一下文档，发现调用 <code>removeArrangedSubview:</code> 后，子 view 并不会从视图中移除，需要额外调用 <code>removeFromSuperview()</code> 方法。</p><!--- more ---><p>Apple 官方文档：</p><blockquote><p>This method removes the provided view from the stack’s <code>arrangedSubviews</code> array. The view’s position and size will no longer be managed by the stack view. <strong>However, this method does not remove the provided view from the stack’s <code>subviews</code> array; therefore, the view is still displayed as part of the view hierarchy.</strong><br><strong>To prevent the view from appearing on screen after calling the stack’s <code>removeArrangedSubview:</code> method, explicitly remove the view from the subviews array by calling the view’s <code>removeFromSuperview()</code> method</strong>, or set the view’s <code>isHidden</code> property to true.</p></blockquote><hr><ul><li><a href="https://developer.apple.com/documentation/uikit/uistackview/1616235-removearrangedsubview">https://developer.apple.com/documentation/uikit/uistackview/1616235-removearrangedsubview</a></li><li><a href="https://www.hackingwithswift.com/read/31/4/removing-views-from-a-uistackview-with-removearrangedsubview">Removing views from a UIStackView with removeArrangedSubview()</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当在 UITableViewCell 中使用了 UIStackView 时，在 &lt;code&gt;prepareForReuse()&lt;/code&gt; 中调用了 UIStackView 的 &lt;code&gt;removeArrangedSubview:&lt;/code&gt; 方法，发现 cell </summary>
      
    
    
    
    
    <category term="Swift" scheme="http://kiligwyu.com/tags/Swift/"/>
    
    <category term="UI" scheme="http://kiligwyu.com/tags/UI/"/>
    
    <category term="UIStackView" scheme="http://kiligwyu.com/tags/UIStackView/"/>
    
  </entry>
  
  <entry>
    <title>Alfred 以管理员身份执行脚本</title>
    <link href="http://kiligwyu.com/Alfred-do-shell-script-with-administrator-privileges/"/>
    <id>http://kiligwyu.com/Alfred-do-shell-script-with-administrator-privileges/</id>
    <published>2020-12-12T08:50:25.000Z</published>
    <updated>2020-12-12T11:32:34.792Z</updated>
    
    <content type="html"><![CDATA[<p>为提高工作效率，我们经常会写一些自动化脚本，也会使用些效率工具，比如 Alfred，两者相结合，借助 Alfred 来快速执行些脚本，但有些脚本需要以管理员身份执行，那么如何在 Alfred 中以管理员身份来执行脚本呢？</p><!--- more --><p>需要借助于 AppleScript，在 Alfred 的 workflow action 中选择 <code>Run NSAppleScript</code>，不过这样会在 Alfred 的主线程中执行，要在后台执行可以选择 <code>Run Script</code> action， 并在 Language 中选中 <code>/usr/bin/osascript (AS) </code>，脚本内容为 <code>do shell script &quot;脚本路径&quot; with administrator privileges</code>，这样就可以在后台以管理员身份执行脚本了。如下图</p><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20201212171932.png" alt="e.g."></p><p>另，上图中的脚本为自动切换正式版和 beta 版 Xcode：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># switch between release and beta xcodes</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">xcswitch</span></span>() &#123;</span><br><span class="line">    RELEASE=<span class="string">&quot;Xcode.app&quot;</span></span><br><span class="line">    BETA=<span class="string">&quot;Xcode-beta.app&quot;</span></span><br><span class="line"></span><br><span class="line">    CURRENT=$(xcode-select -p)</span><br><span class="line">    NEXT=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$CURRENT</span>&quot;</span> =~ <span class="string">&quot;<span class="variable">$RELEASE</span>&quot;</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        NEXT=<span class="string">&quot;<span class="variable">$BETA</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        NEXT=<span class="string">&quot;<span class="variable">$RELEASE</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    sudo xcode-select -s <span class="string">&quot;/Applications/<span class="variable">$NEXT</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Switched to <span class="variable">$NEXT</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xcswitch</span><br></pre></td></tr></table></figure><hr><ul><li><a href="https://www.jessesquires.com/blog/2020/07/07/quickly-switching-between-xcodes/">Quickly switching between Xcodes</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为提高工作效率，我们经常会写一些自动化脚本，也会使用些效率工具，比如 Alfred，两者相结合，借助 Alfred 来快速执行些脚本，但有些脚本需要以管理员身份执行，那么如何在 Alfred 中以管理员身份来执行脚本呢？&lt;/p&gt;
&lt;!--- more --&gt;

&lt;p&gt;需要借</summary>
      
    
    
    
    
    <category term="alfred" scheme="http://kiligwyu.com/tags/alfred/"/>
    
  </entry>
  
  <entry>
    <title>Fix Xcode source editor extension not visible in System Preferences - Extensions</title>
    <link href="http://kiligwyu.com/fix-Xcode-source-editor-extension-not-visible-in-System-Preferences-Extensions/"/>
    <id>http://kiligwyu.com/fix-Xcode-source-editor-extension-not-visible-in-System-Preferences-Extensions/</id>
    <published>2020-04-19T09:21:55.000Z</published>
    <updated>2020-04-19T09:53:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现 Xcode 插件失效了，在「系统偏好设置 - 拓展」里，Xcode Source Editor 也不见了。最后在 <a href="https://github.com/nicklockwood/SwiftFormat/issues/494">这里</a> 找到了解决方法。</p><!--- more ---><blockquote><p>The article <a href="https://nshipster.com/xcode-source-extensions/">Xcode​Kit and Xcode Source Editor Extensions</a> by Zoë Smith, March 25th, 2019, says:</p><p><em>Finally, when multiple copies of Xcode are on the same machine, extensions can stop working completely. In this case, Apple Developer Relations suggests re-registering your main copy of Xcode with Launch Services (it’s easiest to temporarily add lsregister’s location to PATH first):</em></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ PATH=/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support:<span class="string">&quot;<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">$ lsregister -f /Applications/Xcode.app</span><br></pre></td></tr></table></figure><p>因为之前我有多个版本的 Xcode，<code>Xcode_10.3.app</code>、<code>Xcode_11.3.1.app</code>、<code>Xcode_11.4.app</code> 等，从 App Store 下载最新版 Xcode (11.4.1) 后，删掉了旧的 Xcode，就出现了这个问题，在终端执行以上命令后就好了。</p><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20200419174843.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/nicklockwood/SwiftFormat/issues/494">https://github.com/nicklockwood/SwiftFormat/issues/494</a></li><li><a href="https://nshipster.com/xcode-source-extensions/">Xcode​Kit and Xcode Source Editor Extensions</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天发现 Xcode 插件失效了，在「系统偏好设置 - 拓展」里，Xcode Source Editor 也不见了。最后在 &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/issues/494&quot;&gt;这里&lt;/a&gt; 找到了</summary>
      
    
    
    
    
    <category term="Xcode" scheme="http://kiligwyu.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>优化 Microsoft AutoUpdate 下载慢的问题</title>
    <link href="http://kiligwyu.com/%E4%BC%98%E5%8C%96MicrosoftAutoUpdate%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://kiligwyu.com/%E4%BC%98%E5%8C%96MicrosoftAutoUpdate%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-16T14:29:09.000Z</published>
    <updated>2020-03-16T14:55:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近 Microsoft AutoUpdate 下载特别慢，还经常失败，于是在 Console 中看了下它的日志，发现其访问了 <code>azurewebsites.net</code> 和 <code>akamaized.net</code>，下载是从 <code>akamaized.net</code> 这里下载的。于是把这两个域名都加入到某软件的自定义规则中，然后下载就快多了。</p><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20200316223835.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近 Microsoft AutoUpdate 下载特别慢，还经常失败，于是在 Console 中看了下它的日志，发现其访问了 &lt;code&gt;azurewebsites.net&lt;/code&gt; 和 &lt;code&gt;akamaized.net&lt;/code&gt;，下载是从 &lt;code&gt;ak</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 编程题 in Swift</title>
    <link href="http://kiligwyu.com/%E5%89%91%E6%8C%87Offer%E7%BC%96%E7%A8%8B%E9%A2%98inSwift/"/>
    <id>http://kiligwyu.com/%E5%89%91%E6%8C%87Offer%E7%BC%96%E7%A8%8B%E9%A2%98inSwift/</id>
    <published>2020-03-16T07:20:05.000Z</published>
    <updated>2020-03-16T07:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0">1. 赋值运算符函数</a></li><li><a href="#2-%E5%AE%9E%E7%8E%B0-Singleton-%E6%A8%A1%E5%BC%8F">2. 实现 Singleton 模式</a></li><li><a href="#3-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97">3. 数组中重复的数字</a><ul><li><a href="#3-1-%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97">3.1 找出数组中重复的数字</a></li><li><a href="#3-2-%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97">3.2 不修改数组找出重复的数字</a></li></ul></li><li><a href="#4-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE">4. 二维数组中的查找</a></li><li><a href="#5-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC">5. 替换空格</a></li><li><a href="#6-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8">6. 从尾到头打印链表</a></li><li><a href="#7-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91">7. 重建二叉树</a></li><li><a href="#8-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9">8. 二叉树的下一个节点</a></li><li><a href="#9-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">9. 用两个栈实现队列</a></li><li><a href="#10-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">10. 斐波那契数列</a><ul><li><a href="#10-1-%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%AC-n-%E9%A1%B9">10.1 求斐波那契数列的第 n 项</a></li><li><a href="#10-2-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98">10.2 青蛙跳台阶问题</a></li></ul></li><li><a href="#11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97">11. 旋转数组的最小数字</a></li><li><a href="#%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD">未完待续</a></li></ul><!--- more ---><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="1-赋值运算符函数"><a href="#1-赋值运算符函数" class="headerlink" title="1. 赋值运算符函数"></a>1. 赋值运算符函数</h1><p>Swift 支持运算符重载、<a href="https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID46">自定义运算符</a>。</p><blockquote><p>注意</p><p>以下这些标记 <code>=</code>、<code>-&gt;</code>、<code>//</code>、<code>/*</code>、<code>*/</code>、<code>.</code>，前缀运算符 <code>&lt;</code>、<code>&amp;</code> 和 <code>?</code>，中缀运算符 <code>?</code>，后缀运算符 <code>&gt;</code>、<code>!</code> 和 <code>?</code> 是被系统保留的。这些符号不能被重载，也不能用作自定义运算符。</p></blockquote><p>哪些字符能用于自定义运算符，可见 <a href="https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418">https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418</a>。</p><p>下面以重载 <code>*</code> 为例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">*</span>(<span class="params">lhs</span>: <span class="type">String</span>, <span class="params">rhs</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> result <span class="operator">=</span> lhs</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>rhs &#123;</span><br><span class="line">     result <span class="operator">+=</span> lhs</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="string">&quot;a&quot;</span> <span class="operator">*</span> <span class="number">5</span> <span class="comment">// &quot;aaaaa&quot;</span></span><br></pre></td></tr></table></figure><h1 id="2-实现-Singleton-模式"><a href="#2-实现-Singleton-模式" class="headerlink" title="2. 实现 Singleton 模式"></a>2. 实现 Singleton 模式</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本的 Swift 单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton_1</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">Singleton_1</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">init</span>()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单例中静态属性的额外作用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton_2</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> _shared <span class="operator">=</span> <span class="type">Singleton_2</span>()</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">init</span>()</span> &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> shared: <span class="type">Singleton_2</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;do something&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> _shared</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>对于单例而言，请使用引用类型；</li><li>将单例类型标记为 <code>final</code>，其实例标记为 <code>public</code>，构造器标记为 <code>private</code>；</li><li>在命名的时候，尽量使用更符合 Swift 风格的 <code>shared</code>，而不是 Objective-C 风格的 <code>sharedInstance</code>；</li><li>如果在获取单例的时候还需要引入其他的额外作用，那么可以创建一个静态的只读属性。</li></ul></blockquote><h1 id="3-数组中重复的数字"><a href="#3-数组中重复的数字" class="headerlink" title="3. 数组中重复的数字"></a>3. 数组中重复的数字</h1><h2 id="3-1-找出数组中重复的数字"><a href="#3-1-找出数组中重复的数字" class="headerlink" title="3.1 找出数组中重复的数字"></a>3.1 找出数组中重复的数字</h2><blockquote><p>在一个长度为 n 的数组里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为 7 的数组｛2，3，1，0，2，5，3｝，那么对应的输出是重复的数字 2 或者 3。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDuplicate</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>])</span> -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">guard</span> <span class="operator">!</span>array.contains(where: &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">||</span> <span class="variable">$0</span> <span class="operator">&gt;</span> array.count <span class="operator">-</span> <span class="number">1</span> &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">    <span class="keyword">while</span> array[i] <span class="operator">!=</span> i &#123;</span><br><span class="line">      <span class="keyword">if</span> array[i] <span class="operator">==</span> array[array[i]] &#123;</span><br><span class="line">        <span class="keyword">return</span> array[i]</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      array.swapAt(i, array[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;no duplication&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> array2: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line"><span class="keyword">var</span> array3 <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="operator">-</span><span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> array4 <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> array5 <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array1) <span class="comment">// 2</span></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array2) <span class="comment">// nil, input is empty</span></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array3) <span class="comment">// nil, input is invalid</span></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array4) <span class="comment">// nil, input is invalid</span></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array5) <span class="comment">// nil, no duplication</span></span><br></pre></td></tr></table></figure><p>时间复杂度为 O(n)，空间复杂度为 O(1)</p><h2 id="3-2-不修改数组找出重复的数字"><a href="#3-2-不修改数组找出重复的数字" class="headerlink" title="3.2 不修改数组找出重复的数字"></a>3.2 不修改数组找出重复的数字</h2><blockquote><p>在一个长度为 n+1 的数组里的所有数字都在 1~n 的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为 8 的数组｛2，3，5，4，3，2，6，7｝，那么对应的输出是重复的数字 2 或者 3</p></blockquote><blockquote><p>二分查找</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">getDuplicate</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>])</span> -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">guard</span> <span class="operator">!</span>array.contains(where: &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">1</span> <span class="operator">||</span> <span class="variable">$0</span> <span class="operator">&gt;</span> array.count <span class="operator">-</span> <span class="number">1</span> &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">1</span>, right <span class="operator">=</span> array.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> right <span class="operator">&gt;=</span> left &#123;</span><br><span class="line">    <span class="keyword">let</span> middle <span class="operator">=</span> (right <span class="operator">-</span> left) <span class="operator">&gt;&gt;</span> <span class="number">1</span> <span class="operator">+</span> left</span><br><span class="line">    <span class="keyword">let</span> count <span class="operator">=</span> _helper(array, left: left, right: middle)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left <span class="operator">==</span> right &#123;</span><br><span class="line">      <span class="keyword">if</span> count <span class="operator">&gt;</span> <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> count <span class="operator">&gt;</span> middle <span class="operator">-</span> left <span class="operator">+</span> <span class="number">1</span> &#123;</span><br><span class="line">      right <span class="operator">=</span> middle</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      left <span class="operator">=</span> middle <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_helper</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>], <span class="params">left</span>: <span class="type">Int</span>, <span class="params">right</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">    <span class="keyword">if</span> array[i] <span class="operator">&gt;=</span> left, array[i] <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">      count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">getDuplicate(array) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>时间复杂度为 O(nlogn)，空间复杂度为 O(1)</p><blockquote><p>需要指出的是，这种算法不能保证找出所有重复的数字。例如，该算法不能找出数组｛2，3，5，4，3，2，6，7｝中重复的数字 2。这是因为在 1~2 的范围里有 1 和 2 两个数字，这个范围的数字也出现 2 次，此时我们用该算法不能确定是每个数字各出现一次还是某个数字出现了两次。</p></blockquote><h1 id="4-二维数组中的查找"><a href="#4-二维数组中的查找" class="headerlink" title="4. 二维数组中的查找"></a>4. 二维数组中的查找</h1><blockquote><p>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><blockquote><p>右上角、左下角</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span>(<span class="keyword">_</span> <span class="params">number</span>: <span class="type">Int</span>, <span class="params">in</span> <span class="params">array</span>: [[<span class="type">Int</span>]])</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rows <span class="operator">=</span> array.count</span><br><span class="line">  <span class="keyword">guard</span> rows <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> columns <span class="operator">=</span> array[<span class="number">0</span>].count</span><br><span class="line">  <span class="keyword">guard</span> columns <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> row <span class="operator">=</span> <span class="number">0</span>, column <span class="operator">=</span> columns <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> row <span class="operator">&lt;</span> rows, column <span class="operator">&gt;=</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> number <span class="operator">==</span> array[row][column] &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number <span class="operator">&lt;</span> array[row][column] &#123;</span><br><span class="line">      column <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      row <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">12</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">15</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">find(<span class="number">7</span>, in: array) <span class="comment">// true</span></span><br><span class="line">find(<span class="number">1</span>, in: array) <span class="comment">// true</span></span><br><span class="line">find(<span class="number">15</span>, in: array) <span class="comment">// true</span></span><br><span class="line">find(<span class="number">20</span>, in: array) <span class="comment">// false</span></span><br><span class="line">find(<span class="number">0</span>, in: array) <span class="comment">// false</span></span><br><span class="line">find(<span class="number">3</span>, in: array) <span class="comment">// false</span></span><br><span class="line">find(<span class="number">5</span>, in: []) <span class="comment">// false, input is invalid</span></span><br></pre></td></tr></table></figure><h1 id="5-替换空格"><a href="#5-替换空格" class="headerlink" title="5. 替换空格"></a>5. 替换空格</h1><blockquote><p>题目：请实现一个函数，把字符串中的每个空格替换成“％20”例如，输入“We are happy.”，则输出“We％20are％20happy.”。</p></blockquote><blockquote><p>倒序、双指针</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">replaceBlank</span>(<span class="keyword">_</span> <span class="params">string</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> chars <span class="operator">=</span> <span class="type">Array</span>(string)</span><br><span class="line">  <span class="keyword">let</span> blankCount <span class="operator">=</span> chars.filter &#123; <span class="variable">$0</span> <span class="operator">==</span> <span class="string">&quot; &quot;</span> &#125;.count</span><br><span class="line">  chars.append(contentsOf:</span><br><span class="line">    <span class="type">Array</span>(repeating: <span class="string">&quot; &quot;</span>, count: blankCount <span class="operator">*</span> <span class="number">2</span>)</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> p1 <span class="operator">=</span> string.count <span class="operator">-</span> <span class="number">1</span>, p2 <span class="operator">=</span> chars.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> p1 <span class="operator">!=</span> p2 &#123;</span><br><span class="line">    <span class="keyword">if</span> chars[p1] <span class="operator">!=</span> <span class="string">&quot; &quot;</span> &#123;</span><br><span class="line">      chars[p2] <span class="operator">=</span> chars[p1]</span><br><span class="line">      p2 <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      chars[p2] <span class="operator">=</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">      chars[p2 <span class="operator">-</span> <span class="number">1</span>] <span class="operator">=</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">      chars[p2 <span class="operator">-</span> <span class="number">2</span>] <span class="operator">=</span> <span class="string">&quot;%&quot;</span></span><br><span class="line">      p2 <span class="operator">-=</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    p1 <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="type">String</span>(chars)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">replaceBlank(<span class="string">&quot;We are happy.&quot;</span>) <span class="comment">// &quot;We%20are%20happy.&quot;</span></span><br><span class="line">replaceBlank(<span class="string">&quot; We are happy. &quot;</span>) <span class="comment">// &quot;%20We%20are%20happy.%20&quot;</span></span><br><span class="line">replaceBlank(<span class="string">&quot;Wearehappy.&quot;</span>) <span class="comment">// &quot;Wearehappy.&quot;</span></span><br><span class="line">replaceBlank(<span class="string">&quot;  &quot;</span>) <span class="comment">// &quot;%20%20&quot;</span></span><br><span class="line">replaceBlank(<span class="string">&quot;&quot;</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="6-从尾到头打印链表"><a href="#6-从尾到头打印链表" class="headerlink" title="6. 从尾到头打印链表"></a>6. 从尾到头打印链表</h1><blockquote><p>题目：输入一个链表的头节点，从尾到头反过来打印出每个节点的值。</p></blockquote><blockquote><p>栈、递归</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListReversingly</span>(<span class="keyword">_</span> <span class="params">node</span>: <span class="type">ListNode</span>&lt;<span class="type">Int</span>&gt;?)</span> &#123;</span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> node <span class="operator">=</span> node <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;node is nil&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> node.next <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    printListReversingly(node.next<span class="operator">!</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(node.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>&lt;<span class="title">Int</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> next: <span class="type">ListNode</span>&lt;<span class="type">Int</span>&gt;?</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">init</span>(<span class="params">value</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> head <span class="operator">=</span> <span class="type">ListNode</span>(value: <span class="number">1</span>)</span><br><span class="line">head.next <span class="operator">=</span> <span class="type">ListNode</span>(value: <span class="number">2</span>)</span><br><span class="line">head.next<span class="operator">?</span>.next <span class="operator">=</span> <span class="type">ListNode</span>(value: <span class="number">3</span>)</span><br><span class="line">head.next<span class="operator">?</span>.next<span class="operator">?</span>.next <span class="operator">=</span> <span class="type">ListNode</span>(value: <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">printListReversingly(head) <span class="comment">// 4 3 2 1</span></span><br><span class="line">printListReversingly(head.next<span class="operator">?</span>.next<span class="operator">?</span>.next) <span class="comment">// 4</span></span><br><span class="line">printListReversingly(head.next<span class="operator">?</span>.next<span class="operator">?</span>.next<span class="operator">?</span>.next) <span class="comment">// node is nil</span></span><br></pre></td></tr></table></figure><h1 id="7-重建二叉树"><a href="#7-重建二叉树" class="headerlink" title="7. 重建二叉树"></a>7. 重建二叉树</h1><blockquote><p>题目：输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p></blockquote><p>二叉树：<code>除根节点之外每个节点只有一个父节点，根节点没有父节点；除叶节点之外所有节点都有一个或多个子节点，叶节点没有子节点。父节点和子节点之间用指针链接。</code></p><ul><li>前序遍历：先访问根节点，再访问左子节点，最后访问右子节点。</li><li>中序遍历：先访问左子节点，再访问根节点，最后访问右子节点。</li><li>后序遍历：先访问左子节点，再访问右子节点，最后访问根节点。</li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/384px-Binary_tree.svg.png"></p><p>以上图为例：</p><p>前序遍历：2, 7, 2, 6, 5, 11, 5, 9, 4<br>中序遍历：2, 7, 5, 6, 11, 2, 5, 4, 9<br>后序遍历：2, 5, 11, 6, 7, 4, 9, 5, 2</p><blockquote><p>递归</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">construct</span>(<span class="params">preorder</span>: [<span class="type">Int</span>], <span class="params">inorder</span>: [<span class="type">Int</span>])</span> -&gt; <span class="type">BinaryTreeNode</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> preorder.count <span class="operator">&gt;</span> <span class="number">0</span>, preorder.count <span class="operator">==</span> inorder.count <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> _helper(preorder, inorder)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_helper</span>(<span class="keyword">_</span> <span class="params">preorder</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">inorder</span>: [<span class="type">Int</span>])</span> -&gt; <span class="type">BinaryTreeNode</span>? &#123;</span><br><span class="line">  <span class="keyword">let</span> root <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: preorder.first<span class="operator">!</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> preorder.count <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> inorder.count <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> root</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// find root node in inorder</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> rootIndex <span class="operator">=</span> inorder.firstIndex(of: preorder.first<span class="operator">!</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> leftInorder <span class="operator">=</span> inorder[<span class="operator">..&lt;</span>rootIndex]</span><br><span class="line">  <span class="keyword">let</span> rightInorder <span class="operator">=</span> inorder[(rootIndex <span class="operator">+</span> <span class="number">1</span>)<span class="operator">...</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// construct left subtree</span></span><br><span class="line">  <span class="keyword">if</span> leftInorder.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">    root.left <span class="operator">=</span> _helper(<span class="type">Array</span>(preorder[<span class="number">1</span><span class="operator">...</span>rootIndex]),</span><br><span class="line">                        <span class="type">Array</span>(leftInorder))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// construct right subtree</span></span><br><span class="line">  <span class="keyword">if</span> rightInorder.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">    root.right <span class="operator">=</span> _helper(<span class="type">Array</span>(preorder[(rootIndex <span class="operator">+</span> <span class="number">1</span>)<span class="operator">...</span>]),</span><br><span class="line">                         <span class="type">Array</span>(rightInorder))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> left: <span class="type">BinaryTreeNode</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">var</span> right: <span class="type">BinaryTreeNode</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">init</span>(<span class="params">value</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> root <span class="operator">=</span> construct(preorder: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>],</span><br><span class="line">                     inorder: [<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line">root<span class="operator">?</span>.value <span class="comment">// 1</span></span><br><span class="line">root<span class="operator">?</span>.left<span class="operator">?</span>.value <span class="comment">// 2</span></span><br><span class="line">root<span class="operator">?</span>.left<span class="operator">?</span>.left<span class="operator">?</span>.value <span class="comment">// 4</span></span><br><span class="line">root<span class="operator">?</span>.left<span class="operator">?</span>.left<span class="operator">?</span>.right<span class="operator">?</span>.value <span class="comment">// 7</span></span><br><span class="line">root<span class="operator">?</span>.right<span class="operator">?</span>.value <span class="comment">// 3</span></span><br><span class="line">root<span class="operator">?</span>.right<span class="operator">?</span>.right<span class="operator">?</span>.left<span class="operator">?</span>.value <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Invalid input</span></span><br><span class="line"><span class="keyword">let</span> root2 <span class="operator">=</span> construct(preorder: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>],</span><br><span class="line">                      inorder: [<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure><h1 id="8-二叉树的下一个节点"><a href="#8-二叉树的下一个节点" class="headerlink" title="8. 二叉树的下一个节点"></a>8. 二叉树的下一个节点</h1><blockquote><p>题目：给定一棵二叉树和其中的一个节点，如何找出中序遍历序列的下一个节点？树中的节点除了有两个分别指向左、右子节点的指针，还有个指向父节点的指针。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNext</span>(<span class="params">node</span>: <span class="type">BinaryTreeNode</span>&lt;<span class="type">String</span>&gt;)</span> -&gt; <span class="type">BinaryTreeNode</span>&lt;<span class="type">String</span>&gt;? &#123;</span><br><span class="line">  <span class="keyword">if</span> node.right <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> next <span class="operator">=</span> node.right</span><br><span class="line">    <span class="keyword">while</span> next<span class="operator">!</span>.left <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">      next <span class="operator">=</span> next<span class="operator">!</span>.left</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> node.parent <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> next: <span class="type">BinaryTreeNode</span>? <span class="operator">=</span> node, parent <span class="operator">=</span> node.parent</span><br><span class="line">    <span class="keyword">while</span> parent <span class="operator">!=</span> <span class="literal">nil</span>, parent<span class="operator">?</span>.right <span class="operator">==</span> next &#123;</span><br><span class="line">      next <span class="operator">=</span> parent</span><br><span class="line">      parent <span class="operator">=</span> parent<span class="operator">?</span>.parent</span><br><span class="line">    &#125;</span><br><span class="line">    next <span class="operator">=</span> parent</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>&lt;<span class="title">T</span>&gt; <span class="title">where</span> <span class="title">T</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value: <span class="type">T</span></span><br><span class="line">  <span class="keyword">var</span> left: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">var</span> right: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> parent: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">init</span>(<span class="params">value</span>: <span class="type">T</span>, <span class="params">parent</span>: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">    <span class="keyword">self</span>.parent <span class="operator">=</span> parent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinaryTreeNode</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">==</span> (<span class="params">lhs</span>: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;, <span class="params">rhs</span>: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.value <span class="operator">==</span> rhs.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;a&quot;</span>)</span><br><span class="line">a.left <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;b&quot;</span>, parent: a)</span><br><span class="line">a.left<span class="operator">?</span>.left <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;d&quot;</span>, parent: a.left)</span><br><span class="line">a.left<span class="operator">?</span>.right <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;e&quot;</span>, parent: a.left)</span><br><span class="line">a.left<span class="operator">?</span>.right<span class="operator">?</span>.left <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;h&quot;</span>, parent: a.left<span class="operator">?</span>.right)</span><br><span class="line">a.left<span class="operator">?</span>.right<span class="operator">?</span>.right <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;i&quot;</span>, parent: a.left<span class="operator">?</span>.right)</span><br><span class="line"></span><br><span class="line">a.right <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;c&quot;</span>, parent: a)</span><br><span class="line">a.right<span class="operator">?</span>.left <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;f&quot;</span>, parent: a.right)</span><br><span class="line">a.right<span class="operator">?</span>.right <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;g&quot;</span>, parent: a.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> a.left<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> a.left<span class="operator">!</span>.left<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> e <span class="operator">=</span> a.left<span class="operator">!</span>.right<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> h <span class="operator">=</span> a.left<span class="operator">!</span>.right<span class="operator">!</span>.left<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> i <span class="operator">=</span> a.left<span class="operator">!</span>.right<span class="operator">!</span>.right<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> a.right<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> f <span class="operator">=</span> a.right<span class="operator">!</span>.left<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> g <span class="operator">=</span> a.right<span class="operator">!</span>.right<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">getNext(node: b)<span class="operator">?</span>.value <span class="comment">// h</span></span><br><span class="line">getNext(node: a)<span class="operator">?</span>.value <span class="comment">// f</span></span><br><span class="line">getNext(node: d)<span class="operator">?</span>.value <span class="comment">// b</span></span><br><span class="line">getNext(node: f)<span class="operator">?</span>.value <span class="comment">// c</span></span><br><span class="line">getNext(node: i)<span class="operator">?</span>.value <span class="comment">// a</span></span><br><span class="line">getNext(node: g)<span class="operator">?</span>.value <span class="comment">// nil</span></span><br></pre></td></tr></table></figure><h1 id="9-用两个栈实现队列"><a href="#9-用两个栈实现队列" class="headerlink" title="9. 用两个栈实现队列"></a>9. 用两个栈实现队列</h1><blockquote><p>题目：用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead，分别完成在队列尾部插入节点和在队列头部删除节点的功能。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">CQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CQueue</span>(<span class="keyword">void</span>);</span><br><span class="line">  ~<span class="built_in">CQueue</span>(<span class="keyword">void</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">const</span> T&amp; node)</span></span>;</span><br><span class="line">  <span class="function">T <span class="title">deleteHead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  stack&lt;T&gt; stackl;</span><br><span class="line">  stack&lt;T&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Swift 实现如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stack1 <span class="operator">=</span> <span class="type">Stack</span>&lt;<span class="keyword">Any</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> stack2 <span class="operator">=</span> <span class="type">Stack</span>&lt;<span class="keyword">Any</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendTail</span>(<span class="params">element</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">  stack1.push(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteHead</span>()</span> -&gt; <span class="keyword">Any</span><span class="operator">?</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> stack2.count <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> stack1.count <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> stack1.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        stack2.push(stack1.pop()<span class="operator">!</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> stack2.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stack2.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的 Swift 实现如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 见：https://kiligwyu.com/数据结构和排序算法inswift/#栈的实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> stackArray <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.count</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.last</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// push operation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">T</span>)</span> &#123;</span><br><span class="line">    stackArray.append(element)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// pop operation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span>()</span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="operator">!</span>stackArray.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stackArray.removeLast()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// print all elements</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">printAllElements</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, value) <span class="keyword">in</span> stackArray.enumerated() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[<span class="subst">\(index)</span>]<span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-斐波那契数列"><a href="#10-斐波那契数列" class="headerlink" title="10. 斐波那契数列"></a>10. 斐波那契数列</h1><h2 id="10-1-求斐波那契数列的第-n-项"><a href="#10-1-求斐波那契数列的第-n-项" class="headerlink" title="10.1 求斐波那契数列的第 n 项"></a>10.1 求斐波那契数列的第 n 项</h2><blockquote><p>写一个函数，输入 n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p></blockquote><p>$$<br>f(n)=\begin{cases}<br>0 \qquad\qquad\qquad\quad\ \ n = 0 \\<br>1 \qquad\qquad\qquad\quad\ \ n = 1 \\<br>f(n-1)+f(n-2) \quad n &gt; 1<br>\end{cases}<br>$$</p><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><p>时间复杂度为 O(n)</p><blockquote><p>避免重复运算</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span>(<span class="params">n</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">UInt64</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> fibNMinusOne: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> fibNMinusTwo: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> fibN: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">2</span><span class="operator">...</span>n &#123;</span><br><span class="line">    fibN <span class="operator">=</span> fibNMinusOne <span class="operator">+</span> fibNMinusTwo</span><br><span class="line">    </span><br><span class="line">    fibNMinusTwo <span class="operator">=</span> fibNMinusOne</span><br><span class="line">    fibNMinusOne <span class="operator">=</span> fibN</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> fibN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibonacci(n: <span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line">fibonacci(n: <span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">fibonacci(n: <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line">fibonacci(n: <span class="number">3</span>) <span class="comment">// 2</span></span><br><span class="line">fibonacci(n: <span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line">fibonacci(n: <span class="number">5</span>) <span class="comment">// 5</span></span><br><span class="line">fibonacci(n: <span class="number">6</span>) <span class="comment">// 8</span></span><br><span class="line">fibonacci(n: <span class="number">7</span>) <span class="comment">// 13</span></span><br><span class="line">fibonacci(n: <span class="number">8</span>) <span class="comment">// 21</span></span><br><span class="line">fibonacci(n: <span class="number">9</span>) <span class="comment">// 34</span></span><br><span class="line">fibonacci(n: <span class="number">10</span>) <span class="comment">// 55</span></span><br><span class="line">fibonacci(n: <span class="number">20</span>) <span class="comment">// 6765</span></span><br><span class="line">fibonacci(n: <span class="number">30</span>) <span class="comment">// 832040</span></span><br><span class="line">fibonacci(n: <span class="number">40</span>) <span class="comment">// 102334155</span></span><br><span class="line">fibonacci(n: <span class="number">50</span>) <span class="comment">// 12586269025</span></span><br></pre></td></tr></table></figure><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法 2"></a>解法 2</h3><p>时间复杂度为 O(logn)</p><blockquote><p>矩阵乘方</p><p>$$\begin{bmatrix}f(n) &amp; f(n-1)\\f(n-1) &amp;f(n-2)\end{bmatrix}=\begin{bmatrix}1 &amp; 1\\1 &amp;0\end{bmatrix}^{n-1}$$</p><p>$$<br>a^n=\begin{cases}<br>a^{n/2}a^{n/2} \qquad\qquad n 为偶数 \\<br>a^{(n-1)/2}a^{(n-1)/2}a \quad\ n 为奇数 \\<br>\end{cases}<br>$$</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci2</span>(<span class="params">n</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">UInt64</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> _helper(n: n <span class="operator">-</span> <span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_helper</span>(<span class="params">n</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Matrix</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> matrix0</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">2</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> matrix0 <span class="operator">×</span> matrix0</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _helper(n: n <span class="operator">/</span> <span class="number">2</span>) <span class="operator">×</span> _helper(n: n <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _helper(n: (n <span class="operator">-</span> <span class="number">1</span>) <span class="operator">/</span> <span class="number">2</span>) <span class="operator">×</span> _helper(n: (n <span class="operator">-</span> <span class="number">1</span>) <span class="operator">/</span> <span class="number">2</span>) <span class="operator">×</span> matrix0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Matrix</span> <span class="operator">=</span> [[<span class="type">UInt64</span>]]</span><br><span class="line"><span class="keyword">let</span> matrix0: <span class="type">Matrix</span> <span class="operator">=</span> [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">×</span> : <span class="type">MultiplicationPrecedence</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">×</span> (<span class="params">lhs</span>: <span class="type">Matrix</span>, <span class="params">rhs</span>: <span class="type">Matrix</span>)</span> -&gt; <span class="type">Matrix</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> row <span class="operator">=</span> lhs.count, col <span class="operator">=</span> rhs.first<span class="operator">!</span>.count, len <span class="operator">=</span> lhs.first<span class="operator">!</span>.count</span><br><span class="line">  <span class="keyword">let</span> rowArray <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">UInt64</span>(<span class="number">0</span>), count: col)</span><br><span class="line">  <span class="keyword">var</span> out <span class="operator">=</span> <span class="type">Matrix</span>(repeating: rowArray, count: row)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> row &#123;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> col &#123;</span><br><span class="line">      <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> len &#123;</span><br><span class="line">        out[i][j] <span class="operator">+=</span> lhs[i][k] <span class="operator">*</span> rhs[k][j]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibonacci2(n: <span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line">fibonacci2(n: <span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">fibonacci2(n: <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line">fibonacci2(n: <span class="number">3</span>) <span class="comment">// 2</span></span><br><span class="line">fibonacci2(n: <span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line">fibonacci2(n: <span class="number">5</span>) <span class="comment">// 5</span></span><br><span class="line">fibonacci2(n: <span class="number">6</span>) <span class="comment">// 8</span></span><br><span class="line">fibonacci2(n: <span class="number">7</span>) <span class="comment">// 13</span></span><br><span class="line">fibonacci2(n: <span class="number">8</span>) <span class="comment">// 21</span></span><br><span class="line">fibonacci2(n: <span class="number">9</span>) <span class="comment">// 34</span></span><br><span class="line">fibonacci2(n: <span class="number">10</span>) <span class="comment">// 55</span></span><br><span class="line">fibonacci2(n: <span class="number">20</span>) <span class="comment">// 6765</span></span><br><span class="line">fibonacci2(n: <span class="number">30</span>) <span class="comment">// 832040</span></span><br><span class="line">fibonacci2(n: <span class="number">40</span>) <span class="comment">// 102334155</span></span><br><span class="line">fibonacci2(n: <span class="number">50</span>) <span class="comment">// 12586269025</span></span><br></pre></td></tr></table></figure><h2 id="10-2-青蛙跳台阶问题"><a href="#10-2-青蛙跳台阶问题" class="headerlink" title="10.2 青蛙跳台阶问题"></a>10.2 青蛙跳台阶问题</h2><blockquote><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p></blockquote><blockquote><p>$$<br>f(n)=\begin{cases}<br>1 \qquad\qquad\qquad\quad\ \ n = 1 \\<br>2 \qquad\qquad\qquad\quad\ \ n = 2 \\<br>f(n-1)+f(n-2) \quad n &gt; 2<br>\end{cases}<br>$$</p><p>解法同 10.1。<br>另，假如该青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶…也可以跳上 n 级，那么该青蛙跳上一个 n 级的台阶总共有多少种跳法。此时 $$f(n)=2^{n-1}$$。</p></blockquote><h1 id="11-旋转数组的最小数字"><a href="#11-旋转数组的最小数字" class="headerlink" title="11. 旋转数组的最小数字"></a>11. 旋转数组的最小数字</h1><blockquote><p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 {3，4，5，1，2} 为 {1，2，3，4，5} 的一个旋转，该数组的最小值为 1。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMin</span>(<span class="params">in</span> <span class="params">numbers</span>: [<span class="type">Int</span>])</span> -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> numbers.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">  <span class="keyword">guard</span> numbers.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> numbers[<span class="number">0</span>] &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> index1 <span class="operator">=</span> <span class="number">0</span>, index2 <span class="operator">=</span> numbers.count <span class="operator">-</span> <span class="number">1</span>, indexMid <span class="operator">=</span> index1</span><br><span class="line">  <span class="keyword">while</span> numbers[index1] <span class="operator">&gt;=</span> numbers[index2] &#123;</span><br><span class="line">    <span class="keyword">if</span> index2 <span class="operator">-</span> index1 <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">      indexMid <span class="operator">=</span> index2</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    indexMid <span class="operator">=</span> (index1 <span class="operator">+</span> index2) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> numbers[index1] <span class="operator">==</span> numbers[indexMid],</span><br><span class="line">      numbers[index2] <span class="operator">==</span> numbers[indexMid] &#123;</span><br><span class="line">      <span class="keyword">var</span> result <span class="operator">=</span> numbers[index1]</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> index1 <span class="operator">+</span> <span class="number">1</span><span class="operator">...</span>index2 &#123;</span><br><span class="line">        result <span class="operator">=</span> <span class="built_in">min</span>(result, numbers[i])</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> numbers[indexMid] <span class="operator">&gt;=</span> numbers[index1] &#123;</span><br><span class="line">      index1 <span class="operator">=</span> indexMid</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> numbers[indexMid] <span class="operator">&lt;=</span> numbers[index2] &#123;</span><br><span class="line">      index2 <span class="operator">=</span> indexMid</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> numbers[indexMid]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findMin(in: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// 1</span></span><br><span class="line">findMin(in: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// 1</span></span><br><span class="line">findMin(in: [<span class="number">1</span>]) <span class="comment">// 1</span></span><br><span class="line">findMin(in: []) <span class="comment">// nil</span></span><br><span class="line">findMin(in: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://swift.gg/2016/04/19/operator-overloading-swift/">Swift 运算符重载简介</a></li><li><a href="https://swift.gg/2017/01/10/dear-erica-singletons-and-property-observers/">单例中静态属性的额外作用</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0&quot;&gt;1. 赋值运算符函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E5%AE%9E%E7%8E%B0</summary>
      
    
    
    
    
    <category term="算法" scheme="http://kiligwyu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="剑指 Offer" scheme="http://kiligwyu.com/tags/%E5%89%91%E6%8C%87-Offer/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和排序算法 in Swift</title>
    <link href="http://kiligwyu.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95inSwift/"/>
    <id>http://kiligwyu.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95inSwift/</id>
    <published>2020-03-03T06:58:53.000Z</published>
    <updated>2020-03-16T07:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">1. 数据结构</a><ul><li><a href="#1-1-%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84-Swift-%E5%AE%9E%E7%8E%B0">1.1 链表、栈和队列的 Swift 实现</a><ul><li><a href="#1-1-1-%E9%93%BE%E8%A1%A8-Linked-List">1.1.1 链表 (Linked List)</a><ul><li><a href="#1-1-1-1-%E8%8A%82%E7%82%B9%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1.1.1.1 节点的抽象数据类型</a></li><li><a href="#1-1-1-2-%E8%8A%82%E7%82%B9%E7%9A%84%E5%AE%9E%E7%8E%B0">1.1.1.2 节点的实现</a></li><li><a href="#1-1-1-3-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1.1.1.3 双向链表的抽象数据类型</a></li><li><a href="#1-1-1-4-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0">1.1.1.4 双向链表的实现</a></li></ul></li><li><a href="#1-1-2-%E6%A0%88-Stack">1.1.2 栈 (Stack)</a><ul><li><a href="#1-1-2-1-%E6%A0%88%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B">1.1.2.1 栈的抽象数据模型</a></li><li><a href="#1-1-2-2-%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0">1.1.2.2 栈的实现</a></li></ul></li><li><a href="#1-1-3-%E9%98%9F%E5%88%97-Queue">1.1.3 队列 (Queue)</a><ul><li><a href="#1-1-3-1-%E9%98%9F%E5%88%97%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B">1.1.3.1 队列的抽象数据模型</a></li><li><a href="#1-1-3-2-%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0">1.1.3.2 队列的实现</a></li></ul></li></ul></li></ul></li><li><a href="#2-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">2. 排序算法</a><ul><li><a href="#2-1-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">2.1 冒泡排序</a></li><li><a href="#2-2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">2.2 选择排序</a></li><li><a href="#2-3-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">2.3 插入排序</a></li><li><a href="#2-4-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">2.4 归并排序</a></li><li><a href="#2-5-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">2.5 快速排序</a></li></ul></li><li><a href="#3-%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5">3. 相关链接</a></li></ul><!--- more ---><h1 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h1><blockquote><p>数据结构（英语： data structure ）是计算机中存储、组织数据的方式。</p></blockquote><blockquote><p>数据结构 (data structure) 是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带 “结构” 的数据元素的集合。“结构” 就是指数据元素之间存在的关系，分为逻辑结构和存储结构。</p></blockquote><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20200303152502.png" alt="数据结构"></p><p>常用的数据结构：</p><ul><li>数组 (Array)</li><li>栈 (Stack)</li><li>队列 (Queue)</li><li>链表 (Linked List)</li><li>树 (Tree)</li><li>图 (Graph)</li><li>堆 (Heap)</li><li>散列表 (Hash)</li></ul><h2 id="1-1-链表、栈和队列的-Swift-实现"><a href="#1-1-链表、栈和队列的-Swift-实现" class="headerlink" title="1.1 链表、栈和队列的 Swift 实现"></a>1.1 链表、栈和队列的 Swift 实现</h2><h3 id="1-1-1-链表-Linked-List"><a href="#1-1-1-链表-Linked-List" class="headerlink" title="1.1.1 链表 (Linked List)"></a>1.1.1 链表 (Linked List)</h3><p>链表是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针。链表可分为单向链表，双向链表以及循环链表。下文以双向链表为例。</p><h4 id="1-1-1-1-节点的抽象数据类型"><a href="#1-1-1-1-节点的抽象数据类型" class="headerlink" title="1.1.1.1 节点的抽象数据类型"></a>1.1.1.1 节点的抽象数据类型</h4><blockquote><p>抽象数据类型 (ADT，Abstract Data Type) 是指一个数学模型以及定义在此数学模型上的一组操作。它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ADT 节点(node)</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">  value: 持有的数据</span><br><span class="line"></span><br><span class="line">Operation</span><br><span class="line">  init: 初始化</span><br><span class="line">  previous: 指向上一节点的指针</span><br><span class="line">  next: 指向下一节点的指针</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-1-2-节点的实现"><a href="#1-1-1-2-节点的实现" class="headerlink" title="1.1.1.2 节点的实现"></a>1.1.1.2 节点的实现</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">T</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> previous: <span class="type">LinkedListNode</span>?</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">LinkedListNode</span>?</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(<span class="params">value</span>: <span class="type">T</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-1-3-双向链表的抽象数据类型"><a href="#1-1-1-3-双向链表的抽象数据类型" class="headerlink" title="1.1.1.3 双向链表的抽象数据类型"></a>1.1.1.3 双向链表的抽象数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ADT 链表（linked list）</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">  linked list: 持有的线性表</span><br><span class="line"></span><br><span class="line">Operation</span><br><span class="line">  init: 初始化</span><br><span class="line">  count: 持有节点总个数</span><br><span class="line">  isEmpty: 是否为空</span><br><span class="line">  first: 头节点</span><br><span class="line">  last: 尾节点</span><br><span class="line">  node: 传入 index 返回节点</span><br><span class="line">  insert: 插入 node 到指定 index</span><br><span class="line">  insertToHead: 插入节点到表头</span><br><span class="line">  appendToTail: 插入节点到表尾</span><br><span class="line">  removeAll: 移除所有节点</span><br><span class="line">  remove: 移除传入的节点</span><br><span class="line">  removeAt: 移除传入 index 的节点</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-1-4-双向链表的实现"><a href="#1-1-1-4-双向链表的实现" class="headerlink" title="1.1.1.4 双向链表的实现"></a>1.1.1.4 双向链表的实现</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Node</span> <span class="operator">=</span> <span class="type">LinkedListNode</span>&lt;<span class="type">T</span>&gt;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// first node pointer</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> head: <span class="type">Node</span>?</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// first node pointer</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> first: <span class="type">Node</span>? &#123; <span class="keyword">return</span> head &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// last node pointer</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> last: <span class="type">Node</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> node <span class="operator">=</span> head <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> next <span class="operator">=</span> node.next &#123;</span><br><span class="line">      node <span class="operator">=</span> next</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123; <span class="keyword">return</span> head <span class="operator">==</span> <span class="literal">nil</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// total count of nodes</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> node <span class="operator">=</span> head <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> next <span class="operator">=</span> node.next &#123;</span><br><span class="line">      node <span class="operator">=</span> next</span><br><span class="line">      count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - insert node</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// get node of index</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">node</span>(<span class="params">atIndex</span> <span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Node</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> index <span class="operator">&lt;</span> count <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> node <span class="operator">=</span> head</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>index &#123;</span><br><span class="line">      node <span class="operator">=</span> node<span class="operator">?</span>.next</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// insert node to tail</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">appendToTail</span>(<span class="params">node</span>: <span class="type">Node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode <span class="operator">=</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> lastNode <span class="operator">=</span> last &#123;</span><br><span class="line">      newNode.previous <span class="operator">=</span> lastNode</span><br><span class="line">      lastNode.next <span class="operator">=</span> newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head <span class="operator">=</span> newNode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// insert node to head</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">insertToFirst</span>(<span class="params">node</span>: <span class="type">Node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newHead <span class="operator">=</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> head <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">      head <span class="operator">=</span> newHead</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newHead.next <span class="operator">=</span> head</span><br><span class="line">      head<span class="operator">?</span>.previous <span class="operator">=</span> newHead</span><br><span class="line">      head <span class="operator">=</span> newHead</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// insert node to specific index</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span>(<span class="keyword">_</span> <span class="params">node</span>: <span class="type">Node</span>, <span class="params">atIndex</span> <span class="params">index</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> index <span class="operator">&gt;=</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;invalid input index&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> newNode <span class="operator">=</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> count <span class="operator">==</span> <span class="number">0</span> <span class="operator">||</span> index <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">      insertToFirst(node: newNode)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">guard</span> index <span class="operator">&lt;</span> count <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;out of range&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> prev <span class="operator">=</span> <span class="keyword">self</span>.node(atIndex: index <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">let</span> next <span class="operator">=</span> prev<span class="operator">?</span>.next</span><br><span class="line">      </span><br><span class="line">      newNode.previous <span class="operator">=</span> prev</span><br><span class="line">      newNode.next <span class="operator">=</span> next</span><br><span class="line">      prev<span class="operator">?</span>.next <span class="operator">=</span> newNode</span><br><span class="line">      next<span class="operator">?</span>.previous <span class="operator">=</span> newNode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - remove node</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// removing all nodes</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">removeAll</span>()</span> &#123;</span><br><span class="line">    head <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// remove a node</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span>(<span class="params">node</span>: <span class="type">Node</span>)</span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> head <span class="operator">!=</span> <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;linked list is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> prev <span class="operator">=</span> node.previous</span><br><span class="line">    <span class="keyword">let</span> next <span class="operator">=</span> node.next</span><br><span class="line">    next<span class="operator">?</span>.previous <span class="operator">=</span> prev</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> prev <span class="operator">=</span> prev &#123;</span><br><span class="line">      prev.next <span class="operator">=</span> next</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head <span class="operator">=</span> next</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    node.previous <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    node.next <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node.value</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// remove a node by it&#x27;s index</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span>(<span class="keyword">_</span> <span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="operator">!</span>isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;linked list is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> node <span class="operator">=</span> <span class="keyword">self</span>.node(atIndex: index) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> remove(node: node)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// remove last node</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">removeLast</span>()</span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> last <span class="operator">=</span> last <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> remove(node: last)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - print all nodes</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// print all nodes</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">printAllNodes</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> node <span class="operator">=</span> head</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>count &#123;</span><br><span class="line">      <span class="keyword">if</span> node <span class="operator">==</span> <span class="literal">nil</span> &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[<span class="subst">\(index)</span>]<span class="subst">\(node<span class="operator">!</span>.value)</span>&quot;</span>)</span><br><span class="line">      </span><br><span class="line">      node <span class="operator">=</span> node<span class="operator">?</span>.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-栈-Stack"><a href="#1-1-2-栈-Stack" class="headerlink" title="1.1.2 栈 (Stack)"></a>1.1.2 栈 (Stack)</h3><blockquote><p>堆叠（英语： stack）又称为 栈或堆迭，是计算机科学中的一种抽象资料型別，只允许在有序的线性资料集合的一端（称为堆叠顶端，英语： top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。因而按照后进先出（LIFO, Last In First Out）的原理运作。</p></blockquote><h4 id="1-1-2-1-栈的抽象数据模型"><a href="#1-1-2-1-栈的抽象数据模型" class="headerlink" title="1.1.2.1 栈的抽象数据模型"></a>1.1.2.1 栈的抽象数据模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ADT 栈（Stack）</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">  linked list:持有的线性表</span><br><span class="line"></span><br><span class="line">Operation</span><br><span class="line">  init:初始化</span><br><span class="line">  count:栈的元素个数</span><br><span class="line">  isEmpty:是否为空</span><br><span class="line">  push:入栈</span><br><span class="line">  pop:出栈</span><br><span class="line">  top:返回顶部元素</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-2-2-栈的实现"><a href="#1-1-2-2-栈的实现" class="headerlink" title="1.1.2.2 栈的实现"></a>1.1.2.2 栈的实现</h4><p>将数组（顺序存储）作为栈的线性表的实现。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> stackArray <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.count</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.last</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// push operation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">T</span>)</span> &#123;</span><br><span class="line">    stackArray.append(element)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// pop operation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span>()</span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="operator">!</span>stackArray.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stackArray.removeLast()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// print all elements</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">printAllElements</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, value) <span class="keyword">in</span> stackArray.enumerated() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[<span class="subst">\(index)</span>]<span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-队列-Queue"><a href="#1-1-3-队列-Queue" class="headerlink" title="1.1.3 队列 (Queue)"></a>1.1.3 队列 (Queue)</h3><blockquote><p>队列，又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为 rear）进行插入操作，在前端（称为 front）进行删除操作。</p></blockquote><h4 id="1-1-3-1-队列的抽象数据模型"><a href="#1-1-3-1-队列的抽象数据模型" class="headerlink" title="1.1.3.1 队列的抽象数据模型"></a>1.1.3.1 队列的抽象数据模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ADT 队列（Queue）</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">  linked list:持有的线性表</span><br><span class="line"></span><br><span class="line">Operation</span><br><span class="line">  init:初始化</span><br><span class="line">  count:栈的元素个数</span><br><span class="line">  isEmpty:是否为空</span><br><span class="line">  front:获取队列头元素</span><br><span class="line">  enqueue:插入到队尾</span><br><span class="line">  dequeue:删除队列头元素并返回</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-3-2-队列的实现"><a href="#1-1-3-2-队列的实现" class="headerlink" title="1.1.3.2 队列的实现"></a>1.1.3.2 队列的实现</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> queueArray <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queueArray.count</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queueArray.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> front: <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> queueArray.first</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// add element</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">enqueue</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">T</span>)</span> &#123;</span><br><span class="line">    queueArray.append(element)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// remove element</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">dequeue</span>()</span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> queueArray.isEmpty &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queueArray.removeFirst()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">printAllElements</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, value) <span class="keyword">in</span> queueArray.enumerated() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[<span class="subst">\(index)</span>]<span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-排序算法"><a href="#2-排序算法" class="headerlink" title="2. 排序算法"></a>2. 排序算法</h1><p>算法复杂度分为 <a href="https://www.wikiwand.com/zh/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">时间复杂度</a> 和 <a href="https://baike.baidu.com/item/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">空间复杂度</a>。</p><p>| 排序算法 | 平均情况 | 最好情况 | 最坏情况 | 稳定性 | 空间复杂度 |<br>| :—: | :—: | :—: | :—: | :—: | :—: | :—: |<br>| 冒泡 | O(n<sup>2</sup>) | O(n) | O(n<sup>2</sup>)    | 稳定 | O(1) |<br>| 选择排序 | O(n<sup>2</sup>) |    O(n<sup>2</sup>) | O(n<sup>2</sup>) | 不稳定 | O(1) |<br>| 插入排序 | O(n<sup>2</sup>)    | O(n) | O(n<sup>2</sup>)    | 稳定 | O(1) |<br>| 希尔排序 | O(nlogn) | 依赖步长 | 依赖步长 | 稳定 | O(1) |<br>| 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | 稳定 | O(1) |<br>| 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | 稳定 | O(n) |<br>| 快速排序 | O(nlogn) | O(nlogn) | O(n<sup>2</sup>) | 不稳定 | O(logn) |</p><h2 id="2-1-冒泡排序"><a href="#2-1-冒泡排序" class="headerlink" title="2.1 冒泡排序"></a>2.1 冒泡排序</h2><blockquote><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>])</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> isSorted <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count <span class="operator">-</span> <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count <span class="operator">-</span> <span class="number">1</span> <span class="operator">-</span> i &#123;</span><br><span class="line">      <span class="keyword">if</span> array[j] <span class="operator">&gt;</span> array[j <span class="operator">+</span> <span class="number">1</span>] &#123;</span><br><span class="line">        array.swapAt(j, j <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        isSorted <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> isSorted &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-选择排序"><a href="#2-2-选择排序" class="headerlink" title="2.2 选择排序"></a>2.2 选择排序</h2><blockquote><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>])</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">    <span class="keyword">var</span> min <span class="operator">=</span> i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i <span class="operator">+</span> <span class="number">1</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">      <span class="keyword">if</span> array[j] <span class="operator">&lt;</span> array[min] &#123;</span><br><span class="line">        min <span class="operator">=</span> j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array.swapAt(i, min)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-插入排序"><a href="#2-3-插入排序" class="headerlink" title="2.3 插入排序"></a>2.3 插入排序</h2><blockquote><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>])</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">    <span class="keyword">var</span> j <span class="operator">=</span> i</span><br><span class="line">    <span class="keyword">while</span> j <span class="operator">&gt;</span> <span class="number">0</span>, array[j] <span class="operator">&lt;</span> array [j <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">      array.swapAt(j, j <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">      j <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-归并排序"><a href="#2-4-归并排序" class="headerlink" title="2.4 归并排序"></a>2.4 归并排序</h2><blockquote><p>采用分治法:<br>分割：递归地把当前序列平均分割成两半。<br>整合：在保持元素顺序的同时将上一步得到的子序列整合到一起（归并）。</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>])</span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> array &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> middleIndex <span class="operator">=</span> array.count <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">let</span> leftArray <span class="operator">=</span> sort(<span class="type">Array</span>(array[<span class="number">0</span><span class="operator">..&lt;</span>middleIndex]))</span><br><span class="line">  <span class="keyword">let</span> rightArray <span class="operator">=</span> sort(<span class="type">Array</span>(array[middleIndex<span class="operator">..&lt;</span>array.count]))</span><br><span class="line">  <span class="keyword">return</span> _merge(leftArray: leftArray, rightArray: rightArray)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_merge</span>(<span class="params">leftArray</span>: [<span class="type">Int</span>], <span class="params">rightArray</span>: [<span class="type">Int</span>])</span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">var</span> leftIndex <span class="operator">=</span> <span class="number">0</span>, rightIndex <span class="operator">=</span> <span class="number">0</span>, sortedArray <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> leftIndex <span class="operator">&lt;</span> leftArray.count, rightIndex <span class="operator">&lt;</span> rightArray.count &#123;</span><br><span class="line">    <span class="keyword">if</span> leftArray[leftIndex] <span class="operator">&lt;</span> rightArray[rightIndex] &#123;</span><br><span class="line">      sortedArray.append(leftArray[leftIndex])</span><br><span class="line">      leftIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> leftArray[leftIndex] <span class="operator">&gt;</span> rightArray[rightIndex] &#123;</span><br><span class="line">      sortedArray.append(rightArray[rightIndex])</span><br><span class="line">      rightIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sortedArray.append(leftArray[leftIndex])</span><br><span class="line">      leftIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">      sortedArray.append(rightArray[rightIndex])</span><br><span class="line">      rightIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// leftArray is not empty</span></span><br><span class="line">  <span class="keyword">while</span> leftIndex <span class="operator">&lt;</span> leftArray.count &#123;</span><br><span class="line">    sortedArray.append(leftArray[leftIndex])</span><br><span class="line">    leftIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// right array is not empty</span></span><br><span class="line">  <span class="keyword">while</span> rightIndex <span class="operator">&lt;</span> rightArray.count &#123;</span><br><span class="line">    sortedArray.append(rightArray[rightIndex])</span><br><span class="line">    rightIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> sortedArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-快速排序"><a href="#2-5-快速排序" class="headerlink" title="2.5 快速排序"></a>2.5 快速排序</h2><blockquote><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为较小和较大的 2 个子序列，然后递归地排序两个子序列。</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>])</span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> array &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> pivot <span class="operator">=</span> array[array.count <span class="operator">/</span> <span class="number">2</span>]</span><br><span class="line">  <span class="keyword">let</span> leftArray <span class="operator">=</span> array.filter &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> pivot &#125;</span><br><span class="line">  <span class="keyword">let</span> equalArray <span class="operator">=</span> array.filter &#123; <span class="variable">$0</span> <span class="operator">==</span> pivot &#125;</span><br><span class="line">  <span class="keyword">let</span> rightArray <span class="operator">=</span> array.filter &#123; <span class="variable">$0</span> <span class="operator">&gt;</span> pivot &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> sort(leftArray) <span class="operator">+</span> equalArray <span class="operator">+</span> sort(rightArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-相关链接"><a href="#3-相关链接" class="headerlink" title="3. 相关链接"></a>3. 相关链接</h1><ul><li><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450">https://baike.baidu.com/item/数据结构/1450</a></li><li><a href="https://www.wikiwand.com/zh/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">https://www.wikiwand.com/zh/数据结构</a></li><li><a href="https://baike.baidu.com/item/ADT/8945833?fromtitle=%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&fromid=3227531">https://baike.baidu.com/item/ADT/8945833?fromtitle=抽象数据类型&amp;fromid=3227531</a></li><li><a href="https://knightsj.github.io/2018/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95inSwift%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ASwift%E5%9F%BA%E7%A1%80%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构 &amp; 算法 in Swift （一）：Swift 基础和数据结构</a></li><li><a href="https://knightsj.github.io/2018/02/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95inSwift%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80">数据结构 &amp; 算法 in Swift （二）：算法概述和排序算法</a></li><li><a href="https://xiaozhuanlan.com/topic/4297536018">这或许是东半球讲十大排序算法最好的一篇文章</a></li><li><a href="https://www.wikiwand.com/zh/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">https://www.wikiwand.com/zh/排序算法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&quot;&gt;1. 数据结构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-1-%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E5%92%8C%E</summary>
      
    
    
    
    
    <category term="算法" scheme="http://kiligwyu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>通知中心要不要移除观察者</title>
    <link href="http://kiligwyu.com/tong-zhi-zhong-xin-yao-bu-yao-yi-chu-guan-cha-zhe/"/>
    <id>http://kiligwyu.com/tong-zhi-zhong-xin-yao-bu-yao-yi-chu-guan-cha-zhe/</id>
    <published>2019-05-31T03:12:18.000Z</published>
    <updated>2019-05-31T03:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If your app targets iOS 9.0 and later or macOS 10.11 and later, you don’t need to unregister an observer in its dealloc method. Otherwise, you should call removeObserver(_:name:object:) before observer or any object passed to this method is deallocated.</p></blockquote><p>iOS 9.0 和 macOS 10.11 以后不需要手动移除观察者。</p><p>但在用 Block 形式添加观察者时，即 <code>addObserver(forName:object:queue:using:)</code>，却遇到了崩溃的问题，因为观察者并没有被移除，查了下文档，在 <code>addObserver(forName:object:queue:using:)</code> 的文档中看到：</p><blockquote><p>To unregister observations, you pass the object returned by this method to removeObserver(<em>:). You must invoke removeObserver(</em>:) or removeObserver(_:name:object:) before any object specified by addObserver(forName:object:queue:using:) is deallocated.</p></blockquote><p>也就是说 Block 形式的观察者必须要手动移除。</p><p><code>addObserver(forName:object:queue:using:)</code> 是有返回值的，是 <code>NSObjectProtocol</code> 类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectProtocol: <span class="type">NSObjectProtocol</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">objectProtocol <span class="operator">=</span> <span class="type">NotificationCenter</span>.default</span><br><span class="line">    .addObserver(forName: <span class="type">UIApplication</span>.keyboardWillShowNotification,</span><br><span class="line">                 object: <span class="literal">nil</span>,</span><br><span class="line">                 queue: <span class="type">OperationQueue</span>.main) </span><br><span class="line">    &#123; (notification) <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">deinit</span> &#123;</span><br><span class="line">    <span class="type">NotificationCenter</span>.default.removeObserver(objectProtocol<span class="operator">!</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/notificationcenter/1411723-addobserver">https://developer.apple.com/documentation/foundation/notificationcenter/1411723-addobserver</a></li><li><a href="https://developer.apple.com/documentation/foundation/notificationcenter/1415360-addobserver">https://developer.apple.com/documentation/foundation/notificationcenter/1415360-addobserver</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;If your app targets iOS 9.0 and later or macOS 10.11 and later, you don’t need to unregister an observer in its dealloc meth</summary>
      
    
    
    
    
    <category term="NotificationCenter" scheme="http://kiligwyu.com/tags/NotificationCenter/"/>
    
  </entry>
  
  <entry>
    <title>基于 Ubuntu 搭建 FTP 文件服务</title>
    <link href="http://kiligwyu.com/ji-yu-Ubuntu-da-jian-FTP-wen-jian-fu-wu/"/>
    <id>http://kiligwyu.com/ji-yu-Ubuntu-da-jian-FTP-wen-jian-fu-wu/</id>
    <published>2019-05-12T12:59:09.000Z</published>
    <updated>2020-08-31T15:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>2020.08.31：必应壁纸脚本更新，获取 UHD 分辨率图片</li></ul><hr><p>1、使用 <code>apt-get</code> 安装 <a href="https://security.appspot.com/vsftpd.html">vsftpd</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd -y</span><br></pre></td></tr></table></figure><p>1.1、删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登录 FTP 失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/pam.d/vsftpd</span><br></pre></td></tr></table></figure><p>2、新建用户主目录 <code>/home/uftp</code>，通过 FTP 登录后看到的根目录，并设置权限（只读）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/uftp &amp;&amp; sudo chmod a-w /home/uftp</span><br></pre></td></tr></table></figure><p>2.1、新建公共目录，并设置权限（读写）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public</span><br></pre></td></tr></table></figure><p>3、创建一个用户 <code>uftp</code>，并设置该用户目录为 <code>/home/uftp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -d /home/uftp -s /bin/bash uftp</span><br></pre></td></tr></table></figure><p>3.1、为用户 <code>uftp</code> 设置密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd uftp</span><br></pre></td></tr></table></figure><p>3.2、限制用户 <code>uftp</code> 只能通过 FTP 访问服务器，而不能直接登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -s /sbin/nologin uftp</span><br></pre></td></tr></table></figure><p>4、新建文件 <code>/etc/vsftpd.user_list</code>，用于存放允许访问 FTP 的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/vsftpd.user_list &amp;&amp; sudo chmod a+w /etc/vsftpd.user_list</span><br></pre></td></tr></table></figure><p>4.1、修改 <code>/etc/vsftpd.user_list</code> ，加入刚刚创建的用户</p><p>5、修改 vsftpd 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+w /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><p>修改 <code>/etc/vsftpd.conf</code> 文件中的配置，直接将如下配置添加到配置文件最下方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 限制用户对主目录以外目录访问</span><br><span class="line">chroot_local_user&#x3D;YES</span><br><span class="line"></span><br><span class="line"># 指定一个 userlist 存放允许访问 ftp 的用户列表</span><br><span class="line">userlist_deny&#x3D;NO</span><br><span class="line">userlist_enable&#x3D;YES</span><br><span class="line"></span><br><span class="line"># 记录允许访问 ftp 用户列表</span><br><span class="line">userlist_file&#x3D;&#x2F;etc&#x2F;vsftpd.user_list</span><br><span class="line"></span><br><span class="line"># 不配置可能导致莫名的530问题</span><br><span class="line">seccomp_sandbox&#x3D;NO</span><br><span class="line"></span><br><span class="line"># 允许文件上传</span><br><span class="line">write_enable&#x3D;YES</span><br><span class="line"></span><br><span class="line"># 使用utf8编码</span><br><span class="line">utf8_filesystem&#x3D;YES</span><br></pre></td></tr></table></figure><p>6、重启 vsftpd 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p>通过 netstat 命令可以看到系统已经监听了 21 端口，FTP 协议默认使用 21 端口作为服务端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -nltp | grep 21</span><br></pre></td></tr></table></figure><p>7、连接到 FTP 服务器</p><p>7.1、使用 FTP 客户端连接，如 Yummy FTP</p><p>7.2、macOS 下在 Finder 中直接按 ⌘+K，输入以下地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp:&#x2F;&#x2F;用户名:密码@ip</span><br></pre></td></tr></table></figure><h2 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h2><p>1、每日必应图片的脚本 <code>DailyBingWallpaper.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">SAVEPATH=<span class="string">&quot;/home/uftp/public/Pictures/Bing/&quot;</span>`date <span class="string">&quot;+%Y/&quot;</span>``date <span class="string">&quot;+%m&quot;</span>`</span><br><span class="line">NAME=$(date <span class="string">&quot;+%d&quot;</span>)</span><br><span class="line">URL=<span class="string">&quot;https://bing.com/HPImageArchive.aspx?format=js&amp;n=1&amp;mkt=zh-CN&quot;</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$SAVEPATH</span></span><br><span class="line"></span><br><span class="line">JSON=`curl -s <span class="variable">$URL</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JSON</span> &gt; <span class="variable">$SAVEPATH</span>/<span class="variable">$NAME</span>.json</span><br><span class="line">imgUrl=<span class="string">&quot;https://www.bing.com&quot;</span>`<span class="built_in">echo</span> <span class="variable">$JSON</span> | jq <span class="string">&quot;.images&quot;</span> | jq -r <span class="string">&quot;.[0].urlbase&quot;</span>`<span class="string">&quot;_UHD.jpg&quot;</span></span><br><span class="line">curl -s -o <span class="variable">$SAVEPATH</span>/<span class="variable">$NAME</span>.jpg <span class="string">&quot;<span class="variable">$imgUrl</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、使用 <code>apt-get</code> 安装 <a href="https://stedolan.github.io/jq/">jq</a> （ json 解析工具）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install jq -y</span><br></pre></td></tr></table></figure><p>3、将 <code>DailyBingWallpaper.sh</code> 添加到定时任务中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>第一次使用 <code>crontab</code> 命令时会提示你选择编辑器，这里选 vim 当编辑器，要修改编辑器时可以用 <code>select-editor</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select-editor</span><br></pre></td></tr></table></figure><p>进入编辑模式，添加一行（每天零点一分执行脚本）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 0 * * * &#x2F;home&#x2F;ubuntu&#x2F;sh&#x2F;DailyBingWallpaper.sh</span><br></pre></td></tr></table></figure><h2 id="And-One-More-Thing"><a href="#And-One-More-Thing" class="headerlink" title="And One More Thing"></a>And One More Thing</h2><p>点击 <a href="https://1drv.ms/f/s!AuQ7aUGVDnCMkRYMlx5ntsikfCws">这里</a> 获取我分享的必应壁纸！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;2020.08.31：必应壁纸脚本更新，获取 UHD 分辨率图片&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;1、使用 &lt;code&gt;apt-get&lt;/code&gt; 安装 &lt;a href=&quot;https://security.appspot.com/vsftpd.html&quot;</summary>
      
    
    
    
    
    <category term="Ubuntu" scheme="http://kiligwyu.com/tags/Ubuntu/"/>
    
    <category term="FTP" scheme="http://kiligwyu.com/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>标记剪贴板内容为 Concealed</title>
    <link href="http://kiligwyu.com/biao-ji-jian-tie-ban-nei-rong-wei-concealed/"/>
    <id>http://kiligwyu.com/biao-ji-jian-tie-ban-nei-rong-wei-concealed/</id>
    <published>2019-04-14T08:47:38.000Z</published>
    <updated>2019-04-14T09:18:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>当要把敏感数据复制到剪贴板时，应将其标记为 <code>org.nspasteboard.Concealed</code>，如密码等。</p><p>此标识符为通用标识符，一些密码管理软件会将复制的密码标记为 Concealed，而一些剪贴板管理软件会自动忽略被标记为 Concealed 的内容。</p><!--- more ---><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pasteboard <span class="operator">=</span> <span class="type">NSPasteboard</span>.general</span><br><span class="line">pasteboard.clearContents()</span><br><span class="line"><span class="comment">// 直接 setString(forType:NSPasteboard.PasteboardType(&quot;org.nspasteboard.ConcealedType&quot;)) 是不行的</span></span><br><span class="line">pasteboard.setString(<span class="string">&quot;concealed content like pwd&quot;</span>, forType: .string)</span><br><span class="line">pasteboard.setString(<span class="string">&quot;&quot;</span>, forType: .<span class="keyword">init</span>(<span class="string">&quot;org.nspasteboard.ConcealedType&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外通用标识符还有 <code>org.nspasteboard.TransientType</code>、<code>org.nspasteboard.AutoGeneratedType</code>、<code>org.nspasteboard.source</code>，这些标识符的含义及使用场景详见 <a href="http://nspasteboard.org/">http://nspasteboard.org/</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://nspasteboard.org/">http://nspasteboard.org/</a></li><li><a href="https://github.com/alyssais/secure-pbcopy/blob/master/main.m">https://github.com/alyssais/secure-pbcopy/blob/master/main.m</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当要把敏感数据复制到剪贴板时，应将其标记为 &lt;code&gt;org.nspasteboard.Concealed&lt;/code&gt;，如密码等。&lt;/p&gt;
&lt;p&gt;此标识符为通用标识符，一些密码管理软件会将复制的密码标记为 Concealed，而一些剪贴板管理软件会自动忽略被标记为 Co</summary>
      
    
    
    
    
    <category term="macOS" scheme="http://kiligwyu.com/tags/macOS/"/>
    
    <category term="NSPasteboard" scheme="http://kiligwyu.com/tags/NSPasteboard/"/>
    
  </entry>
  
  <entry>
    <title>App scanbox not enabled</title>
    <link href="http://kiligwyu.com/App-scanbox-not-enabled/"/>
    <id>http://kiligwyu.com/App-scanbox-not-enabled/</id>
    <published>2019-02-19T05:43:52.000Z</published>
    <updated>2019-02-19T06:32:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://itunes.apple.com/cn/app/id1375291184">花密</a> 的开发过程中，在上传到 App Store Connect 时遇到了 “App scanbox not enabled” 的错误。</p><!--- more ---><center><img src="/image/App-scanbox-not-enabled/CleanShot_1.png" style="zoom: 50%"/></center><p>要上架 App Store，App Scanbox 是一定要开的，在 TARGETS -&gt; Capabilities -&gt; App Scanbox，打开即可。而遇到上面错误时项目的 App Scanbox 确认是已打开的，entitlements 文件也是对的，<del>一脸懵逼</del>，关掉重开也报错，Google 一圈也没解决，有说是代码签名问题，最后的最后，发现 TARGETS -&gt; Build Settings -&gt; Signing -&gt; Code Signing Identity 是空的，选中 <code>Mac Developer</code> 后，再试就上传成功了。</p><center><img src="/image/App-scanbox-not-enabled/CleanShot_2.png" style="zoom:50%"/></center><p>还是 macOS App 审核快。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://www.jianshu.com/p/53774fb4ab02">解决 ERROR ITMS-90296</a></li><li><strong><a href="https://itunes.apple.com/cn/app/id1375291184">花密</a></strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;a href=&quot;https://itunes.apple.com/cn/app/id1375291184&quot;&gt;花密&lt;/a&gt; 的开发过程中，在上传到 App Store Connect 时遇到了 “App scanbox not enabled” 的错误。&lt;/p&gt;
&lt;!-</summary>
      
    
    
    
    
    <category term="macOS" scheme="http://kiligwyu.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>引导用户添加拓展</title>
    <link href="http://kiligwyu.com/guide-to-add-extension/"/>
    <id>http://kiligwyu.com/guide-to-add-extension/</id>
    <published>2018-11-17T02:11:54.000Z</published>
    <updated>2018-11-18T13:17:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果 App 中包含拓展，如何更好的引导用户去启用这些拓展？目前我所见的做的最好的可能是 <a href="https://weibo.com/u/2813718033">Junyu Kuang</a> 的 <a href="https://itunes.apple.com/cn/app/id1268667713">极光阅读</a> 了。</p><img src="../image/guide-to-add-extension/Screenshot_Reader_1.PNG" style="zoom:33%"/><p>引导用户添加拓展时只显示应用相关的拓展。这是如何实现的呢？基于学习目的，我下载了极光阅读的 ipa 包（如何下载见文末），经过一番研究，下面我们来具体实现一下。</p><!--- more ---><p>新建一个 Xcode 项目，并新建一个名为“MailMe”的 Action Extesion，看下 info.plist<br><img src="../image/guide-to-add-extension/Screenshot_MailMe_1.png" style="zoom:60%"/></p><p><code>NSExtensionActivationRule</code> 字段默认值为 <code>TRUEPREDICATE</code>，表示分享任何内容，此拓展都会出现在 Action Sheet 里，可以根据需要添加些限制，修改 <code>NSExtensionActivationRule</code> 为 <code>dictionary</code>，里面可以包含的键见 <a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/AppExtensionKeys.html#//apple_ref/doc/uid/TP40014212-SW11">Action Extension Keys</a>:<br><img src="../image/guide-to-add-extension/Screenshot_Action_Extension_Keys.png" style="zoom:60%"/></p><p>在 UIActivityViewController 类里有个 <code>excludedActivityTypes</code> 的属性，可以隐藏掉不想要的 Activity，如隐藏 AirDrop 等，但只能隐藏系统公开的一些 Activity，并不能隐藏全部。通过 View Debugging 也不能看到都有哪些 Activities。<br><img src="../image/guide-to-add-extension/Screenshot_View_Debug.png" style="zoom:60%"/></p><p>我们来看下极光阅读的拓展的 info.plist：<br><img src="../image/guide-to-add-extension/Screenshot_Reader_2.png" style="zoom:60%"/></p><p><code>NSExtensionActivationRule</code> 的值为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SUBQUERY(</span><br><span class="line">    extensionItems, $extensionItem,</span><br><span class="line">    SUBQUERY(</span><br><span class="line">        $extensionItem.attachments, $attachment,</span><br><span class="line">        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;public.url&quot; ||</span><br><span class="line">        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;public.plain-text&quot; ||</span><br><span class="line">        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;com.jonny.reader.guide&quot;</span><br><span class="line">        ).@count &gt; 0 &amp;&amp;</span><br><span class="line">    SUBQUERY(</span><br><span class="line">        $extensionItem.attachments, $attachment,</span><br><span class="line">        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;public.file-url&quot; ||</span><br><span class="line">        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;com.jonny.reader.share&quot;</span><br><span class="line">    ).@count = 0</span><br><span class="line">).@count &gt; 0</span><br></pre></td></tr></table></figure><p>[吃惊的表情][黑人问号]，还能这么写？！还真可以这么写，<code>NSExtensionActivationRule</code> 里是可以写谓词 (Predicate) 的，其语法见 <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html">Predicate Programming Guide</a>，其中 <code>UTI</code> 为统一类型标识符 <code>Uniform Type Identifiers</code>，所有标识符见 <a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259">Uniform Type Identifiers Reference</a>。</p><p>那么，如果我们自定义一个标识符 <code>com.kiligwyu.mailme.guide</code>，当分享内容为此标识符的 item 时，Action Sheet 里就只显示我们的拓展了，因此把 <code>NSExtensionActivationRule</code> 的值改为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--- 假设 MailMe 拓展只处理分享的文字内容 --&gt;</span></span><br><span class="line">SUBQUERY(</span><br><span class="line">    extensionItems, $extensionItem,</span><br><span class="line">    SUBQUERY(</span><br><span class="line">        $extensionItem.attachments, $attachment,</span><br><span class="line">        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;public.plain-text&quot; OR</span><br><span class="line">        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;com.kiligwyu.mailme.guide&quot;</span><br><span class="line">    ).@count &gt; 0</span><br><span class="line">).@count &gt; 0</span><br></pre></td></tr></table></figure><p>另创建名为 MailMeActivityItem 的类，继承 NSObject，遵循 <code>UIActivityItemSource</code> 协议：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  MailMeActivityItem.swift</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailMeActivityItem</span>: <span class="title">NSObject</span>, <span class="title">UIActivityItemSource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">activityViewControllerPlaceholderItem</span>(<span class="keyword">_</span> <span class="params">activityViewController</span>: <span class="type">UIActivityViewController</span>)</span> -&gt; <span class="keyword">Any</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">activityViewController</span>(<span class="keyword">_</span> <span class="params">activityViewController</span>: <span class="type">UIActivityViewController</span>, <span class="params">itemForActivityType</span> <span class="params">activityType</span>: <span class="type">UIActivity</span>.<span class="type">ActivityType</span>?)</span> -&gt; <span class="keyword">Any</span><span class="operator">?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">activityViewController</span>(<span class="keyword">_</span> <span class="params">activityViewController</span>: <span class="type">UIActivityViewController</span>, <span class="params">dataTypeIdentifierForActivityType</span> <span class="params">activityType</span>: <span class="type">UIActivity</span>.<span class="type">ActivityType</span>?)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;com.kiligwyu.mailme.guide&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在引导用户添加拓展的地方：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activityViewController <span class="operator">=</span> <span class="type">UIActivityViewController</span>(activityItems: [ <span class="type">MailMeActivityItem</span>() ], applicationActivities: <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// Action Sheet 里还会显示 AirDrop、Message、Mail 和 Copy，把这几个去掉即可</span></span><br><span class="line">activityViewController.excludedActivityTypes <span class="operator">=</span> [ .airDrop, .message, .mail, .copyToPasteboard, ]</span><br><span class="line">present(activityViewController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>这样 Action Sheet 里就只显示我们的拓展到了。</p><p>PS：GitHub 上 <a href="https://github.com/naturaln0va/VisualActivityViewController">VisualActivityViewController</a> 这个项目可以预览分享的内容</p><h2 id="PPS-如何下载-ipa"><a href="#PPS-如何下载-ipa" class="headerlink" title="PPS: 如何下载 ipa"></a>PPS: 如何下载 ipa</h2><p>❌ macOS Mojave 已经不支持安装旧版 iTunes<br>❌ 从 App Store 中下载应用，通过抓包获取其下载地址，下载后解压，如果 App 在打包时勾选了 “Include app symbols for your application to receive symbolicated crash logs from Apple.”，那么解压后会得到 Payload 和 Symbols 文件夹，而且里面全是 0K 的文件<br>✅ 通过 Apple Configurator 2</p><ol><li><p>App Store 下载 Apple Configurator 2</p></li><li><p>在 Apple Configurator 2 中登录 Apple ID</p><img src="../image/guide-to-add-extension/Screenshot_Apple_Configurator_1.png" style="zoom:60%"/></li><li><p>连接 iPhone，需先在 iPhone 中安装要下载的应用</p></li><li><p>点击添加应用，从应用列表中选择需要获取 ipa 包的应用</p><img src="../image/guide-to-add-extension/Screenshot_Apple_Configurator_2.png" style="zoom:60%"/><img src="../image/guide-to-add-extension/Screenshot_Apple_Configurator_3.png" style="zoom:60%"/></li><li><p>然后开始下载，下载完成后，因为手机上已经存在该应用，所以会有应用已存在的提示，不要做任何操作，继续下一步</p><img src="../image/guide-to-add-extension/Screenshot_Apple_Configurator_4.png" style="zoom:60%"/><img src="../image/guide-to-add-extension/Screenshot_Apple_Configurator_5.png" style="zoom:60%"/></li><li><p>打开 Finder，前往 <code>~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/</code>，在该路径就可以看到 ipa 文件了</p></li><li><p>拷贝出来，就得到了想要的 ipa</p></li></ol><h2 id="参考及相关链接"><a href="#参考及相关链接" class="headerlink" title="参考及相关链接"></a>参考及相关链接</h2><ul><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html">Predicate Programming Guide</a></li><li><a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/AppExtensionKeys.html#//apple_ref/doc/uid/TP40014212-SW11">Action Extension Keys</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html">Predicate Format String Syntax</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259">System-Declared Uniform Type Identifiers</a></li><li><a href="https://pspdfkit.com/blog/2016/hiding-action-share-extensions-in-your-own-apps/">Hiding Your Action and Share Extensions In Your Own Apps</a></li><li><a href="https://xcanoe.top/ios/da-tan-yi-kuan-appde-nei-bu-shi-xian">打探一款 APP 的内部实现</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果 App 中包含拓展，如何更好的引导用户去启用这些拓展？目前我所见的做的最好的可能是 &lt;a href=&quot;https://weibo.com/u/2813718033&quot;&gt;Junyu Kuang&lt;/a&gt; 的 &lt;a href=&quot;https://itunes.apple.com</summary>
      
    
    
    
    
    <category term="ios" scheme="http://kiligwyu.com/tags/ios/"/>
    
    <category term="swift" scheme="http://kiligwyu.com/tags/swift/"/>
    
    <category term="extension" scheme="http://kiligwyu.com/tags/extension/"/>
    
  </entry>
  
  <entry>
    <title>占位约束</title>
    <link href="http://kiligwyu.com/%E5%8D%A0%E4%BD%8D%E7%BA%A6%E6%9D%9F/"/>
    <id>http://kiligwyu.com/%E5%8D%A0%E4%BD%8D%E7%BA%A6%E6%9D%9F/</id>
    <published>2018-07-30T08:06:28.000Z</published>
    <updated>2018-07-30T08:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>当使用 Interface Builder 开发时，有些控件的约束是需要在代码中控制的，这样就需要在 Interface Builder 中添加约束，再在代码中去掉相应的约束，然后再添加新的约束。</p><p>Interface Builder 为我们提供了一种占位约束，占位约束可以在编译时自动去掉，就不需要我们手动去掉了。只需要选中某个约束，在右侧 Size inspector 中选中 <code>Remove at build time</code> 即可。</p><img src="/image/占位约束/Screenshot.jpg" style="zoom:60%"/><!--- more --->]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当使用 Interface Builder 开发时，有些控件的约束是需要在代码中控制的，这样就需要在 Interface Builder 中添加约束，再在代码中去掉相应的约束，然后再添加新的约束。&lt;/p&gt;
&lt;p&gt;Interface Builder 为我们提供了一种占位约束，</summary>
      
    
    
    
    
    <category term="AutoLayout" scheme="http://kiligwyu.com/tags/AutoLayout/"/>
    
  </entry>
  
  <entry>
    <title>斐讯 K2 刷入 Padavan 固件</title>
    <link href="http://kiligwyu.com/%E6%96%90%E8%AE%AF-K2-%E5%88%B7%E5%85%A5-Padavan-%E5%9B%BA%E4%BB%B6/"/>
    <id>http://kiligwyu.com/%E6%96%90%E8%AE%AF-K2-%E5%88%B7%E5%85%A5-Padavan-%E5%9B%BA%E4%BB%B6/</id>
    <published>2018-07-23T10:19:51.000Z</published>
    <updated>2018-08-02T11:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>WARNING: 本文基于斐讯 K2 PSG1218 路由器，固件版本 22.6.507.43 或 22.6.506.28，刷入固件为 RT-AC54U-GPIO-1-PSG1218-64M_3.4.3.9-099.trx。刷机须谨慎！</p></blockquote><!--- more ---><p>07.30 更新：</p><p>降级到 V22.6.506.28 后，尝试了下 <a href="https://huzibbs.ctfile.com/dir/120079-20196952-af15f2">路由器刷breed Web控制台助手v5.3版本修复测试版</a>，直接成功了 😄 。</p><hr><p>早在 16 年底就入手了斐讯 K2 路由器，之前也听说其会收集用户隐私，一直也没太在意，直到前天，因网页图片没加载出来，就把过滤广告的插件关了，然后就蹦出来斐讯的广告，见下图，我第一感觉就是是斐讯的路由器劫持了网页，植入了广告，当时就决定刷机，在此记下刷机过程。后来在微博上也看到有网友也遇到类似的问题，刷机后就没再碰到过。</p><img src="/image/斐讯-K2-刷入-Padavan-固件/ad.PNG" style="zoom:30%" /><p>下面开始刷机过程。</p><h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0. 准备工作"></a>0. 准备工作</h2><p>注意：刷机时要断开路由器 WAN 口连接，通过 LAN 口与电脑连接，所以先准备好要用到的固件和工具！</p><ul><li>最新固件 <a href="https://pan.baidu.com/s/1eT3hiz4">K2_V22.6.507.43.bin</a></li><li>固件 <a href="https://pan.baidu.com/s/1pM2iOFD">K2_V22.6.506.28.bin</a></li><li><a href="https://pan.baidu.com/s/1eS5yQdG">RoutAckProV1B2.rar</a></li><li><a href="https://pan.baidu.com/s/1i4I9G6h">路由器刷breed Web控制台助手v4.8版本</a></li><li>Padavan 固件 <a href="https://opt.cn2qq.com/padavan/RT-AC54U-GPIO-1-PSG1218-64M_3.4.3.9-099.trx">RT-AC54U-GPIO-1-PSG1218-64M_3.4.3.9-099.trx</a></li></ul><p>（以上的工具都是需要 Windows 环境的，我用的 MacBook，所以又安装了虚拟机 VirtualBox，装了 Win10 系统，又在网上买了根网线转接头。😂）</p><p>接下来就可以通过网线与电脑连接，开始刷机了。</p><h2 id="1-降级至-V22-6-506-28"><a href="#1-降级至-V22-6-506-28" class="headerlink" title="1. 降级至 V22.6.506.28"></a>1. 降级至 V22.6.506.28</h2><p>（之前固件已经升级到最新版本 V22.6.507.43，尝试使用 <a href="https://huzibbs.ctfile.com/dir/120079-20196952-af15f2">路由器刷breed Web控制台助手v5.3版本修复测试版</a> 来直接刷机，但是其在开启 telnet 后登录路由器失败，可能是不支持当前固件。）</p><p>直接刷 K2_V22.6.506.28.bin 或 K2_V22.6.507.43.bin 都提示非法的固件 😂 ，WTF，然后把路由器恢复出厂设置，然后平刷最新固件 K2_V22.6.507.43.bin，成功了，再刷 K2_V22.6.506.28.bin，又成功了，It just works 🤷‍♂️。</p><p><img src="/image/%E6%96%90%E8%AE%AF-K2-%E5%88%B7%E5%85%A5-Padavan-%E5%9B%BA%E4%BB%B6/Screenshot-1.jpg" alt="Screenshot-1"></p><h2 id="2-开启-Telnet"><a href="#2-开启-Telnet" class="headerlink" title="2. 开启 Telnet"></a>2. 开启 Telnet</h2><p>由于我在尝试用「路由器刷breed Web控制台助手v5.3版本」刷时，此助手已经为路由器开好了 telnet。</p><p>没开的可以用「RoutAckProV1B2」这个工具来开。</p><h2 id="3-刷入-Bread"><a href="#3-刷入-Bread" class="headerlink" title="3. 刷入 Bread"></a>3. 刷入 Bread</h2><p>建议先关闭杀毒软件和防火墙，使用管理员身份运行「路由器刷breed Web控制台助手v4.8版本」，刷机方案选择：「通用方案[需要开启路由器telnet或ssh]」，其他不需改动，点开始刷机，等一两分钟即可完成，完成后弹出「是否自动进入bread Web控制台模式」的弹框，点是或否均可。至此可以说刷机已经成功了，可以根据个人喜好刷入各种固件了。</p><p><img src="/image/%E6%96%90%E8%AE%AF-K2-%E5%88%B7%E5%85%A5-Padavan-%E5%9B%BA%E4%BB%B6/Screenshot-2.png" alt="Screenshot-2"></p><p>在运行助手时，系统提示需要 <code>.NET Framework 3.5</code>，WTF，这个问题在很早前玩 Win8 时候就遇到过了，可以利用 DISM 离线安装 .NET Framework 3.5，首先要加载 ISO 镜像文件，在 Win10 开始菜单按钮上点击鼠标右键，选择其中的「Windows PowerShell（管理员）」，打开 PowerShell，输入以下命令即可（注意盘符）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dism /online /enable-feature /featurename:NetFX3 /All /Source:D:\sources\sxs /LimitAccess</span><br></pre></td></tr></table></figure><h2 id="4-刷入-Padavan-固件"><a href="#4-刷入-Padavan-固件" class="headerlink" title="4. 刷入 Padavan 固件"></a>4. 刷入 Padavan 固件</h2><p>首先，断开路由器电源，按住 reset 键不松手，插入电源后约 5s 再松手，在浏览器输入 <code>http://192.168.1.1</code>，即可进入 Breed Web 恢复控制台。</p><p>刷机前最好先在 Breed Web 恢复控制台中的固件备份里备份下 EEPROM 和编程器固件，并恢复一下出厂设置，固件类型选「Config区（公版）」。</p><p>接着就可以刷入 Padavan 固件了：固件更新 -&gt; 选中右侧固件 -&gt; 浏览找到固件点击上传即可。</p><p>也可以使用「breed Web懒人工具助手内置版」（上面提到的那个弹框）。</p><p><img src="/image/%E6%96%90%E8%AE%AF-K2-%E5%88%B7%E5%85%A5-Padavan-%E5%9B%BA%E4%BB%B6/Screenshot-3.png" alt="Screenshot-3"></p><h2 id="5-路由器后台设置"><a href="#5-路由器后台设置" class="headerlink" title="5. 路由器后台设置"></a>5. 路由器后台设置</h2><p>先用 <code>ipconfig</code> 命令来查看本机 ip，以确定路由器后台地址。</p><p><img src="/image/%E6%96%90%E8%AE%AF-K2-%E5%88%B7%E5%85%A5-Padavan-%E5%9B%BA%E4%BB%B6/Screenshot-4.png" alt="Screenshot-4"></p><p>然后浏览器打开 <code>http://192.168.123.1</code>，默认管理员账号密码都是 <code>admin</code>。</p><p>在 高级设置 -&gt; 外部网络（WAN）-&gt; 外网设置，外网连接类型选择「PPPoE：拨号」，在用户名称和用户密码输入框中输入宽带账号和密码，然后点击「应用本页设置」按钮，然后就可以上网了。</p><p>其他设置根据自己需要进行设置。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.qqgzs.com/archives/k2-22-6-507-43.html">斐讯K2全版本刷机教程</a></li><li><a href="http://www.qqgzs.com/archives/k2-22-6-503.html">斐讯k2 22.6.503.31刷机教程</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309404256031382347540&is_hot=1#_0">路由器刷breed Web控制台助手v5.0版本</a></li><li><a href="https://www.ithome.com/html/win10/107493.htm">利用DISM离线安装.NET Framework 3.5</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;WARNING: 本文基于斐讯 K2 PSG1218 路由器，固件版本 22.6.507.43 或 22.6.506.28，刷入固件为 RT-AC54U-GPIO-1-PSG1218-64M_3.4.3.9-099.trx。刷机须谨慎！&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="K2" scheme="http://kiligwyu.com/tags/K2/"/>
    
    <category term="Padavan" scheme="http://kiligwyu.com/tags/Padavan/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 10 beta 缺少 libstdc++ 库的处理</title>
    <link href="http://kiligwyu.com/Xcode-10-beta-%E7%BC%BA%E5%B0%91-libstdc-%E5%BA%93%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://kiligwyu.com/Xcode-10-beta-%E7%BC%BA%E5%B0%91-libstdc-%E5%BA%93%E7%9A%84%E5%A4%84%E7%90%86/</id>
    <published>2018-07-11T13:10:49.000Z</published>
    <updated>2018-08-03T02:44:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我司项目使用企业账号，并不上架 App Store，通过第三方平台进行分发，所以我想直接用 Xcode 10 进行日常开发和打包，但是在编译时遇到了 <code>library not found for -lstdc++.6.0.9</code> 的错误。</p><!--- more ---><p>经查得知在 iOS 12.0 中去掉了这个库，用 libc++ 来替代 libstdc++。</p><p><code>libstdc++.6.0.9.tbd</code> 这个动态库是第三方库引用的，需要等第三方去解决，坐等第三方更新。</p><p>但是可以通过其他方式暂时解决问题，就是 copy Xcode 9.4 中的这个库到 Xcode 10 中。</p><p>Xcode 中 <code>libstdc++.6.0.9.tbd</code> 的路径：<br><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libstdc++.6.0.9.tbd</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libstdc++.6.0.9.tbd /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libstdc++.6.0.9.tbd</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/50694822/xcode-10-ios-12-does-not-contain-libstdc6-0-9">Xcode 10 (iOS 12) does not contain libstdc++6.0.9</a></li><li><a href="https://blog.csdn.net/Vito_Jianxue/article/details/80595635">Xcode 10 beta 运行libstdc++报错处理</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我司项目使用企业账号，并不上架 App Store，通过第三方平台进行分发，所以我想直接用 Xcode 10 进行日常开发和打包，但是在编译时遇到了 &lt;code&gt;library not found for -lstdc++.6.0.9&lt;/code&gt; 的错误。&lt;/p&gt;
&lt;!-</summary>
      
    
    
    
    
    <category term="Xcode-beta" scheme="http://kiligwyu.com/tags/Xcode-beta/"/>
    
    <category term="libstdc++" scheme="http://kiligwyu.com/tags/libstdc/"/>
    
  </entry>
  
  <entry>
    <title>使用 Aria2 下载 Xcode-beta</title>
    <link href="http://kiligwyu.com/download-xcode-beta-by-aria2/"/>
    <id>http://kiligwyu.com/download-xcode-beta-by-aria2/</id>
    <published>2018-06-20T12:19:42.000Z</published>
    <updated>2021-03-28T03:21:38.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="08-14-更新"><a href="#08-14-更新" class="headerlink" title="08.14 更新"></a>08.14 更新</h2><p><del>之前找的 Cookie 有误，已更新，见第一张截图。</del></p><hr><h2 id="关于-Aria2-及其使用"><a href="#关于-Aria2-及其使用" class="headerlink" title="关于 Aria2 及其使用"></a>关于 Aria2 及其使用</h2><p>略。</p><h2 id="下载-Xcode-beta"><a href="#下载-Xcode-beta" class="headerlink" title="下载 Xcode-beta"></a>下载 Xcode-beta</h2><p>使用浏览器下载，由于网络波动，经常下载到一半就被断掉，而且还不能断点续传，Xcode 安装包现在都要 5 个多 G 了 😂 ，网络不好下载很蛋疼的 😂…</p><p>那么能不能用第三方下载工具下载呢，默认是不能的，比如 Xcode_10_Beta_2 的下载地址 <code>https://download.developer.apple.com/Developer_Tools/Xcode_10_Beta_2/Xcode_10_Beta_2.xip</code>，下载下来的只是个 index.html 的文件，浏览器在下载时应该是校验了登录信息的（Cookie）。下面介绍使用 Aria2 来下载 Xcode-beta 的方法。</p><p>首先打开 <a href="https://developer.apple.com/download/">苹果开发者下载网站</a> 并登录，打开开发者工具(⌘⌥I)，首先先点下下载按钮，稍后可以取消下载，<del>如下图找到 Cookie，并复制。</del> 把所有 Request Headers 都复制过去。</p><p><img src="/image/download-xcode-beta-by-aria2/ss1.jpg" alt="ss1"></p><p>在 Aria2 中添加 Xcode-beta 的下载任务时，设置下 header，如这里我是使用 <a href="https://github.com/ziahamza/webui-aria2">Aria2WebUI</a> 这个 GUI 来下载，如下图，在 header 框中贴入复制的 Cookie，然后开始下载即可。</p><p><img src="/image/download-xcode-beta-by-aria2/ss2.png" alt="ss2"></p><p>可以愉快地下载了。</p><p><img src="/image/download-xcode-beta-by-aria2/ss3.PNG" alt="ss3"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.v2ex.com/t/329787">[小技巧] 如何在命令行上下载 苹果开发者网站上的资源?</a></li><li><a href="https://blog.csdn.net/imanapple/article/details/50378618">拒绝 “Xcode-Ghost 门”，如何安全快速下载 Xcode？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;08-14-更新&quot;&gt;&lt;a href=&quot;#08-14-更新&quot; class=&quot;headerlink&quot; title=&quot;08.14 更新&quot;&gt;&lt;/a&gt;08.14 更新&lt;/h2&gt;&lt;p&gt;&lt;del&gt;之前找的 Cookie 有误，已更新，见第一张截图。&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
      
    
    
    
    
    <category term="Aria2" scheme="http://kiligwyu.com/tags/Aria2/"/>
    
    <category term="Xcode" scheme="http://kiligwyu.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>macOS 恢复出厂设置</title>
    <link href="http://kiligwyu.com/macOS-%E6%81%A2%E5%A4%8D%E5%87%BA%E5%8E%82%E8%AE%BE%E7%BD%AE/"/>
    <id>http://kiligwyu.com/macOS-%E6%81%A2%E5%A4%8D%E5%87%BA%E5%8E%82%E8%AE%BE%E7%BD%AE/</id>
    <published>2018-05-28T02:59:47.000Z</published>
    <updated>2021-03-28T03:32:52.056Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong><a href="https://support.apple.com/zh-cn/HT201065">出售、赠送或折抵 Mac 前该怎么做</a></strong></li></ul><p><del>最近由于个人原因要离职了，在公司用的 iMac 需要删除个人使用记录，恢复到出厂设置状态，两种办法。</del></p><p><del>一是重装系统抹掉磁盘。如何重装可查阅 Apple 技术支持网站。这种方式最耗时、最麻烦，但是可以不留一点儿使用痕迹。</del></p><p><del>第二种就是新建管理员账户，并登录，然后删除老账户，删除时选择 <code>Delete the home folder</code>。这种方式最快速，但是还有些残留，需要再删除老用户已安装的应用，删除 Keychin Access 中保存的密码证书等。</del></p><p><del>最后我选择了第二种。</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://support.apple.com/zh-cn/HT201065&quot;&gt;出售、赠送或折抵 Mac 前该怎么做&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;del&gt;最近由于个人原因要离职了，在公司用的 iM</summary>
      
    
    
    
    
    <category term="macOS" scheme="http://kiligwyu.com/tags/macOS/"/>
    
    <category term="还原" scheme="http://kiligwyu.com/tags/%E8%BF%98%E5%8E%9F/"/>
    
  </entry>
  
  <entry>
    <title>iCollect V1.3 &amp; iColor V2.0</title>
    <link href="http://kiligwyu.com/iCollect-V1-3-iColor-V2-0/"/>
    <id>http://kiligwyu.com/iCollect-V1-3-iColor-V2-0/</id>
    <published>2018-05-15T01:24:35.000Z</published>
    <updated>2018-05-15T07:23:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>今早 iCollect Version 1.3 版本和 iColor Version 2.0 版本一起通过审核，上架 App Store。</p><h2 id="iCollect-V1-3"><a href="#iCollect-V1-3" class="headerlink" title="iCollect V1.3"></a>iCollect V1.3</h2><h3 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h3><ul><li>「花密」移动到了「更多功能」页面</li><li>「花密」的小组件增加了 Tapic Engine</li><li>「每日一文」的字体换成系统字体，减小 App 体积（之前的版本用的思源宋体）</li><li>网络变化的 banner 改为只在断网时显示</li><li>首次安装启动显示 Tips</li><li>增加了「关于开发者」</li><li>去掉了桌面图标的 3D Touch</li><li>其他的细节调整和 bug 修改</li></ul><p><img src="/image/iCollect_V1.3/Screenshot_1.PNG" style="zoom:30%" /><img src="/image/iCollect_V1.3/Screenshot_2.PNG" style="zoom:30%" /></p><p><img src="/image/iCollect_V1.3/Screenshot_3.PNG" style="zoom:30%" /><img src="/image/iCollect_V1.3/Screenshot_4.PNG" style="zoom:30%" /></p><h3 id="App-Store-下载"><a href="#App-Store-下载" class="headerlink" title="App Store 下载"></a>App Store 下载</h3><p><a href="https://itunes.apple.com/cn/app/icollect/id1333958571?l=cn&mt=8"><img src="/image/appstore.svg" alt="下载地址"></a></p><h2 id="iColor-V2-0"><a href="#iColor-V2-0" class="headerlink" title="iColor V2.0"></a>iColor V2.0</h2><h2 id="更新内容-1"><a href="#更新内容-1" class="headerlink" title="更新内容"></a>更新内容</h2><ul><li>全新 UI</li><li>去掉了导出为 JSON 文件功能</li><li>增加了「关于开发者」</li></ul><p><img src="/image/iColor_V2.0/Screenshot_1.PNG" style="zoom:30%" /><img src="/image/iColor_V2.0/Screenshot_2.PNG" style="zoom:30%" /></p><img src="/image/iColor_V2.0/Screenshot_3.PNG" style="zoom:30%" /><h3 id="App-Store-下载-1"><a href="#App-Store-下载-1" class="headerlink" title="App Store 下载"></a>App Store 下载</h3><p><a href="https://itunes.apple.com/cn/app/icolor/id1329896441?l=cn&mt=8"><img src="/image/appstore.svg" alt="下载地址"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今早 iCollect Version 1.3 版本和 iColor Version 2.0 版本一起通过审核，上架 App Store。&lt;/p&gt;
&lt;h2 id=&quot;iCollect-V1-3&quot;&gt;&lt;a href=&quot;#iCollect-V1-3&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="App" scheme="http://kiligwyu.com/tags/App/"/>
    
    <category term="iCollect" scheme="http://kiligwyu.com/tags/iCollect/"/>
    
    <category term="iColor" scheme="http://kiligwyu.com/tags/iColor/"/>
    
  </entry>
  
  <entry>
    <title>禁止终端的登录消息</title>
    <link href="http://kiligwyu.com/disable-terminal-login-messages/"/>
    <id>http://kiligwyu.com/disable-terminal-login-messages/</id>
    <published>2018-05-12T05:47:36.000Z</published>
    <updated>2018-05-12T06:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>在默认配置下，打开终端，login 命令会显示当前用户的最后一次登录消息。</p><p><img src="/image/disable-terminal-login-messages/last_login_message.png" alt="last_login_message"></p><p>要禁止这些消息，可以在主目录下创建一个 <code>.hushlogin</code> 的空文件，下次登录将静默登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ touch .hushlogin</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_71/com.ibm.aix.osdevice/suppress_login_msgs.htm">禁止登录消息</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在默认配置下，打开终端，login 命令会显示当前用户的最后一次登录消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/disable-terminal-login-messages/last_login_message.png&quot; alt=&quot;last_login_mes</summary>
      
    
    
    
    
    <category term="Terminal" scheme="http://kiligwyu.com/tags/Terminal/"/>
    
  </entry>
  
</feed>
